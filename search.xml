<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Django+uwsgi+Nginx部署到云服务器]]></title>
    <url>%2F%2Fblog%2FDjango%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
    <content type="text"><![CDATA[前言当我们在本地运行Django项目1python3 manager runserver但是，这只适用于Django的开发模式，只支持单用户访问，要想部署到服务器上供大量用户访问，综合网上的许多资料，在此罗列几种不同的Django部署方案工具：CentOS7腾讯云服务器、 Python3.6、 MySQL5.7、 Django2.2.7、 uwsgi2.0.18、 Nginx1.16.1Django(Git)+uwsgi+Nginx概念在python web开发中，我们经常使用uwsgi配合nginx部署一个web框架，如Django或flask。同时我们又会说，框架和web服务器之间要符合WSGI协议，想更深入理解WSGI和uwsgi的可以看这里Nginx就是一个web服务器，Django或flask就是web框架，只要web服务器和web框架满足WSGI协议，它们就能相互搭配。所以WSGI只是一个协议，一个约定。而不是python的模块、框架等具体的功能uWSGI，则是实现了WSGI协议的一个web服务器。即用来接受客户端请求，转发响应的程序。实际上，一个uWSGI的web服务器，再加上Django这样的web框架，就已经可以实现网站的功能了。那为什么还需要Nginx呢？一个普通的个人网站，访问量不大的话，当然可以由uWSGI和Django构成。但是一旦访问量过大，客户端请求连接就要进行长时间的等待。这个时候就出来了分布式服务器，我们可以多来几台web服务器，都能处理请求。但是谁来分配客户端的请求连接和web服务器呢？Nginx就是这样一个管家的存在，由它来分配。这也就是由Nginx实现反向代理，即代理服务器概述首先客户端请求服务资源，nginx作为直接对外的服务接口，接收到客户端发送过来的http请求，会解包、分析，如果是静态文件请求就根据nginx配置的静态文件目录，返回请求的资源，如果是动态的请求，nginx就通过配置文件，将请求传递给uWSGI；uWSGI 将接收到的包进行处理，并转发给wsgi，wsgi根据请求调用django工程的某个文件或函数，处理完后django将返回值交给wsgi，wsgi将返回值进行打包，转发给uWSGI，uWSGI接收后转发给nginx，nginx最终将返回值返回给客户端(如浏览器)注:不同的组件之间传递信息涉及到数据格式和协议的转换作用第一级的nginx并不是必须的，uwsgi完全可以完成整个的和浏览器交互的流程；在nginx上加上安全性或其他的限制，可以达到保护程序的作用；uWSGI本身是内网接口，开启多个work和processes可能也不够用，而nginx可以代理多台uWSGI完成uWSGI的负载均衡；django在debug=False下对静态文件的处理能力不是很好，而用nginx来处理更加高效。步骤安装Python3在服务器上安装Python3等依赖12345678910111213141516171819202122232425262728293031323334353637# 进入home目录cd ~# 安装相关库yum -y groupinstall "Development tools"yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-develyum -y install gccyum install -y libffi-devel zlib1g-devyum install zlib* -y # 下载python3.6安装包wget https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz # 创建一个文件夹mkdir /usr/local/python3 # 解压安装包tar -zxvf Python-3.6.8.tgz # 进入解压后的目录cd Python-3.6.8 # 配置，使安装路径为/usr/local/python3.6# 第一个指定安装的路径,不指定的话,安装过程中可能软件所需要的文件复制到其他不同目录,删除软件很不方便,复制软件也不方便.# 第二个可以提高python10%-20%代码运行速度. 参考：https://blog.csdn.net/whatday/article/details/98053179# 第三个是为了安装pip需要用到ssl,后面报错会有提到../configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl # 编译，安装 时间较长 make &amp;&amp; make install # 创建软连接ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3 # 更新pippip3 install --upgrade pip安装mysql参考腾讯云Centos7 安装Mysql5.7分支deploy本地创建并切换到分支deploy1git checkout -b deploy注：撤回commit1git reset --soft HEAD^提交前注意在Django项目，配置setting.py中设置：123DEBUG = FalseALLOWED_HOSTS = ['你的服务器IP或者域名', 'localhost', '127.0.0.1']然后提交本地Django代码至github项目的deploy分支拉取Django项目1git clone https://github.com/xxx/xxx.git关于在github上 下载源码 clone 非 master 分支的代码拉取后默认是master分支，需切换到deploy分支1git checkout deploy安装Django+uwsgi+nginx这样在你的服务器上就有了Django项目的代码，但是我们还没安装Django等第三方库接着服务器上安装：1234567891011pip3 install django==2.2.7pip3 install uwsgi# 通过yum安装nginxyum install nginx -y# 创建软连接ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi# ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv# ln -s /usr/local/python3/bin/gunicorn /usr/bin/gunicornln -s /usr/local/python3/bin/django-admin.py /usr/bin/django-admin测试Django进入项目根目录1python3 manage.py runserver我的出现报错：1django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.7.11.None.根据报错安装mysqlclient1pip3 install mysqlclient又报错：12345678910111213141516ERROR: Command errored out with exit status 1: command: /usr/local/python3/bin/python3.6 -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-p6v1q25n/mysqlclient/setup.py'"'"'; __file__='"'"'/tmp/pip-install-p6v1q25n/mysqlclient/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' egg_info --egg-base /tmp/pip-install-p6v1q25n/mysqlclient/pip-egg-info cwd: /tmp/pip-install-p6v1q25n/mysqlclient/ Complete output (10 lines): /bin/sh: mysql_config: command not found Traceback (most recent call last): File "&lt;string&gt;", line 1, in &lt;module&gt; File "/tmp/pip-install-p6v1q25n/mysqlclient/setup.py", line 18, in &lt;module&gt; metadata, options = get_config() File "/tmp/pip-install-p6v1q25n/mysqlclient/setup_posix.py", line 53, in get_config libs = mysql_config("libs_r") File "/tmp/pip-install-p6v1q25n/mysqlclient/setup_posix.py", line 28, in mysql_config raise EnvironmentError("%s not found" % (mysql_config.path,)) OSError: mysql_config not found ----------------------------------------ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.找了找资料，原来需要安装mysqlclient所需依赖，略耗时1yum install mysql-devel gcc gcc-devel python-devel再次安装mysqlclient1pip3 install mysqlclient成功安装，但是再次runserver运行Django 还是报错：123File "/usr/local/python3/lib/python3.6/site-packages/django/db/backends/mysql/base.py", line 36, in &lt;module&gt; raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.7.11.None.找了找资料，django2.2和pymysql版本不匹配。mysqldb不支持python3参考django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.2解决办法：找到Python安装路劲下的Python36-32\Lib\site-packages\django\db\backends\mysql\base.py文件1vi /usr/local/python3/lib/python3.6/site-packages/django/db/backends/mysql/base.py将文件中的如下代码注释即可12# if version &lt; (1, 3, 3):# raise ImproperlyConfigured("mysqlclient 1.3.3 or newer is required; you have %s" % Database.__version__)接着1234567python3 manage.py makemigrationspython3 manage.py migratepython3 manage.py createsuperuserpython3 manage.py runserver期间登录超级管理员却出现CSRF验证失败. 请求被中断.关闭防火墙试试1systemctl stop firewalld.service123456789101112131415161718192021附：# 一．查看防火墙的状态systemctl status firewalld# 或者firewall-cmd --state# 二．关闭防火墙systemctl stop firewalld.service# 禁止防火墙在开机时启动systemctl disable firewalld.service# 三，开启防火墙systemctl start firewalld.service# 防火墙在开机时启动systemctl enable firewalld.service# 重启防火墙systemctl restart firewalld.service然后就可以登录测试uwsgi查看安装的uwsgi版本1uwsgi --version编写测试脚本，可以与Django项目放在同一级路径下1vim test.py123def application(env, start_response): start_response('200 OK', [('Content-Type','text/html')]) return [b"Hello World"]然后运行1uwsgi --http :8008 --wsgi-file test.py然后访问：http://服务器IP:8008/出现Hello World则成功测试uwsgi+Django执行如下命令来检验uwsgi是否能与django项目成功结合1uwsgi --http :8008 --chdir /home/LVideo --wsgi-file LVideo.wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9192常用选项如下所示：12345678910111213http ：协议类型和端口号processes ：开启的进程数量workers ：开启的进程数量，等同于processes（官网的说法是spawn the specified number ofworkers / processes）chdir ：指定运行目录（chdir to specified directory before apps loading）wsgi-file ：载入wsgi-file（load .wsgi file）stats ：在指定的地址上，开启状态服务（enable the stats server on the specified address）threads ：运行线程。由于GIL的存在，我觉得这个真心没啥用。（run each worker in prethreaded mode with the specified number of threads）master ：允许主进程存在（enable master process）daemonize ：使进程在后台运行，并将日志打到指定的日志文件或者udp服务器（daemonize uWSGI）。实际上最常用的，还是把运行记录输出到一个本地文件上。pidfile ：指定pid文件的位置，记录主进程的pid号。vacuum ：当服务器退出的时候自动清理环境，删除unix socket文件和pid文件（try to remove all of the generated file/sockets）注意：--wsgi-file后面跟的是相对目录访问http://IP:8008成功，出现你的Django项目的页面参数太多，可以将其写入ini文件中我是在Django项目的同级目录下创建lvideo_uwsgi.ini文件，写入如下内容(采用字典格式)我的/home下的文件，LVideo是clone下来的项目：12[root@VM_0_14_centos home]# lsLVideo lvideo_uwsgi.ini test.py uwsgi.log uwsgi.pid新建lvideo_uwsgi.ini1vi lvideo_uwsgi.ini这是参考：12345678910111213141516171819202122232425262728293031323334# lvideo_uwsgi.ini file[uwsgi]# Django-related settingshttp = :8008# 真实服务的端口# Django项目根目录 (绝对路径)chdir = /home/LVideo# wsgi.py文件在项目中的位置module = LVideo.wsgi# process-related settings# mastermaster = true# 运行的进程数processes = 4# ... with appropriate permissions - may be needed# chmod-socket = 664# clear environment on exit# 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件vacuum = true# 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器daemonize = /home/uwsgi.log# 指定pid文件的位置，记录主进程的pid号pidfile = /home/uwsgi.pid# 不记录请求信息的日志,只记录错误以及uWSGI内部消息到日志中disable-logging = true你可以复制这里的内容，注意修改chdir、module、daemonize、pidfile：1234567891011[uwsgi]socket = :8008chdir = /home/LVideomodule = LVideo.wsgimaster = trueprocesses = 4vacuum = truedaemonize = /home/uwsgi.logpidfile = /home/uwsgi.piddisable-logging = true其中的端口有两种，分为：12http =:8008 这是在测试通过浏览器访问时，可以成功socket =:8008 这是为了与nginx配置时需要的两个颠倒了就会出错，所以浏览器测试完后需要修改回socket这样保存好后，启动1uwsgi --ini lvideo_uwsgi.ini若你的ini文件中是http =:8008则可以通过浏览器访问到8008端口，然后注意修改回socket =:8008因为我们后面要结合nginx注：这是配置了daemonize后的uwsgi运行成功的样子12[root@VM_0_14_centos home]# uwsgi --ini lvideo_uwsgi.ini [uWSGI] getting INI configuration from lvideo_uwsgi.ini测试Nginx前面已经通过yum安装了nginx查看Nginx版本1nginx -v然后访问服务器IP就可以看到CentOS的欢迎界面？我TM也不知道为什么不是Nginx的欢迎界面…(好像说是index.html的问题)看看有没有进程占用80端口1lsof -i:80这里有123456kinsing 11406 root 5u IPv4 3066592 0t0 TCP VM_0_14_centos:47296-&gt;ip255.ip-139-99-50.net:http (ESTABLISHED)kinsing 11406 root 7u IPv4 3068905 0t0 TCP VM_0_14_centos:48120-&gt;ip255.ip-139-99-50.net:http (ESTABLISHED)kdevtmpfs 11537 root 15u IPv4 3021919 0t0 TCP VM_0_14_centos:46146-&gt;45.89.230.240:http (ESTABLISHED)kdevtmpfs 11537 root 175u IPv4 3068497 0t0 TCP VM_0_14_centos:42542-&gt;178.170.189.5:http (SYN_SENT)kdevtmpfs 11537 root 176u IPv4 3068779 0t0 TCP VM_0_14_centos:42604-&gt;178.170.189.5:http (SYN_SENT)kdevtmpfs 11537 root 177u IPv4 3068921 0t0 TCP VM_0_14_centos:42656-&gt;178.170.189.5:http (SYN_SENT)挖矿病毒(我买的腾讯的服务器)，等会再处理，说明80端口被占，那么我们就配置为8088端口输入nginx -t 看看nginx.conf在哪123[root@VM_0_14_centos ~]# nginx -tnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful然后修改1vi /etc/nginx/nginx.conf把server部分用下面的替代12345678910111213141516171819202122server &#123; listen 8088; server_name localhost; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; charset UTF-8; # 这里存放日志文件 access_log /var/log/nginx/LVideo_access.log; error_log /var/log/nginx/LVideo_error.log; client_max_body_size 75M; location / &#123; # 你的uwsgi_params文件的路径 include /etc/nginx/uwsgi_params; # 你的uwsgi端口 uwsgi_pass 127.0.0.1:8008; # 链接超时时间 uwsgi_read_timeout 30; &#125;&#125;保存看看访问8088端口有没有页面若出现502 Bad Gateway nginx/1.16.1先输入以下命令看看是否有已存在的uwsgi或者nginx进程123ps -ef | grep uwsgips -ef | grep nginx有的话可以杀死123killall -9 uwsgikillall -9 nginx然后重新运行uwsgi和nginx123uwsgi --ini lvideo_uwsgi.inisystemctl start nginx.service然后一定一定可以看到8088端口的页面，我发四(前前后后调整了10多次)！！！如果你的项目界面变得非常low，那么是因为你还没配置nginx解析静态文件在nginx.conf的location / {}前面加上Django项目静态文件夹的路径1234location /static/ &#123; # 你的static的绝对路径 alias /home/LVideo/LVideo/static/; &#125;uwsgi+nginx进程在启动uwsgi时，如果指定了pid，可以通过pid停止uwsgi，如果没指定，直接kill uwsgi的进程id，会导致uwsgi重启，无法关闭成功附：12345678910111213141516171819202122232425262728293031# nginx开机自启动systemctl enable nginx.service# 终止uwsgi方法# 1、未指定 daemonize：Ctrl+c（快捷键可能有所不同）# 2、指定daemonize和pidfile：uwsgi --stop uwsgi.pid# 3、指定daemonize，但未指定pidfile 通过ps，查看uwsgi相关进程ps aux|grep uwsgi# kill pid会发送SIGTERM，只会导致重启，而不是结束掉。需要发送SIGINT或SIGQUIT，对应着是INT才可以killall -s INT /usr/local/bin/uwsgi# 若出现-bash: killall: command not found# 则# debian、ubuntu系统下： apt-get install psmisc# centos 下： yum install psmisc# 进程查看及杀死：lsof -i:80ps -ef | grep nginxkillall -9 nginx提交代码更新服务器Django代码到github1find / -name id_rsa没有ssh钥匙在 cd ~ 下 :ssh-keygen -t rsa -C &quot;xxx@xx.com&quot;一路回车可以看到：Enter file in which to save the key (/root/.ssh/id_rsa)1cat /root/.ssh/id_rsa.pub复制内容到github上即可Django(Git)+uwsgi+Nginx+venv参考一django项目部署到服务器+虚拟环境解决nginx+uwsgi部署Django的所有问题如何把本地的Django项目部署到服务器（亲测）centos6.5下配置django+uwsgi+nginxcentos下配置django、uwsgi和nginx（亲测成功）Python+Django+Nginx+Uwsgi（史上最全步骤）uWSGI+django+nginx的工作原理流程与部署历程Linux vim命令uwsgi、wsgi和nginx的区别和关系!!二linux如何彻底杀掉uwsgi进程uWSGI的安装与配置（官网摘录）centos7 nginx安装/启动/进程状态/杀掉进程nginx报502错误，日志connect() failed (111: Connection refused) while connecting to upstream的解决Linux 下建立 Git 与 GitHub 的连接并克隆到本地三使用Django + Vue.js快速而优雅地构建前后端分离项目]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>服务器</tag>
        <tag>uwsgi</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署Scrapy项目到腾讯云服务器]]></title>
    <url>%2F%2Fblog%2F%E9%83%A8%E7%BD%B2Scrapy%E9%A1%B9%E7%9B%AE%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
    <content type="text"><![CDATA[前言打算把写完的爬虫项目放到服务器上定时运行，然后了解到有scrapyd这个方便管理爬虫，于是这篇文章的指向是在腾讯云服务器上运行scrapd，然后把我们的爬虫上传到scrapyd，使得scrapyd可以管理爬虫项目(注：没有通过文件传输工具把scrapy爬虫项目的文件上传到服务器，额，我是这么理解的，但是是通过scrapyd上传的egg)操作服务器是刚买的腾讯云的CentOS 7系统，没有云数据库，所以后面自己搭mysql，有python2但是没有python3第一步在本机下载scrapyd-client：对于windows系统，建议不要用pip install scrapyd-client去安装scrapyd-client，会出现，scrapyd-deploy不是内部或外部命令，因为scrapyd-deploy不能被windows执行应当直接去github上下载并解压安装包后，进入解压后的目录下，执行1python setup.py install进行安装，若已经用pip安装了的，先卸载Scrapyd-client12pip listpip uninstall scrapyd-client第二步登陆腾讯云服务器里面进行相应的python和相关库安装(结合几篇博文的命令如下)123456789101112131415161718192021222324252627282930313233343536373839404142434445# 进入home目录cd ~# 安装相关库yum -y groupinstall "Development tools"yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-develyum -y install gccyum install -y libffi-devel zlib1g-devyum install zlib* -y # 下载python3.6安装包wget https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz # 创建一个文件夹mkdir /usr/local/python3 # 解压安装包tar -zxvf Python-3.6.8.tgz # 进入解压后的目录cd Python-3.6.8 # 配置，使安装路径为/usr/local/python3.6# 第一个指定安装的路径,不指定的话,安装过程中可能软件所需要的文件复制到其他不同目录,删除软件很不方便,复制软件也不方便.# 第二个可以提高python10%-20%代码运行速度. 参考：https://blog.csdn.net/whatday/article/details/98053179# 第三个是为了安装pip需要用到ssl,后面报错会有提到../configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl # 编译，安装 时间较长 make &amp;&amp; make install # 创建软连接ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3 # 安装scrapyd,scrapyd-client和scrapypip3 install scrapydpip3 install scrapypip3 install scrapyd-client# 更新pippip3 install --upgrade pip # 安装项目需要的库pip install requests使得外网能够访问服务器IP，修改如下文件12345# 查找default_scrapyd.conf路径find / -name default_scrapyd.conf# 修改default_scrapyd.conf，使外网IP可以访问vi /usr/local/python3/lib/python3.6/site-packages/scrapyd/default_scrapyd.confdefault_scrapyd.conf文件里的bind_address修改为1bind_address = 0.0.0.0然后进入腾讯云控制台，点击安全组—&gt;再点击新建在新建的安全组点击修改规则然后添加规则保存后返回服务器实例页面，选中实例，点击更多操作，加入安全组，添加刚才创建安全组此时用 &#39;/usr/local/python3.6/bin/scrapyd&#39;启动scrapyd，加上nohup&amp;则在后台启动运行12345678# 查看scrapy'/usr/local/python3/bin/scrapy'# 启动scrapyd'/usr/local/python3/bin/scrapyd'# 在后台启动运行scrapydnohup '/usr/local/python3/bin/scrapyd' &amp;启动scrapyd成功后台运行scrapyd123[root@VM_0_14_centos ~]# nohup '/usr/local/python3/bin/scrapyd' &amp;[1] 25485[root@VM_0_14_centos ~]# nohup: ignoring input and appending output to ‘nohup.out’通过服务器外网IP:6800可以在浏览器里看到如下页面第三步服务器端安装Mysql 5.7一、配置yum源1.下载mysql源安装包在MySQL官网中下载YUM源rpm安装包：http://dev.mysql.com/downloads/repo/yum/本次下载目录为：/home/目录，因此进入：cd /home执行下载命令：1wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm2.安装mysql源下载完成后使用下面命令安装源：1yum localinstall mysql80-community-release-el7-1.noarch.rpm3.检查是否安装成功1yum repolist enabled | grep "mysql.*-community.*"4.修改安装版本默认安装的mysql版本是8.0，需要安装mysql5.7，需要修改/etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本1vi /etc/yum.repos.d/mysql-community.repo将5.7源的enabled=0改成enabled=1，将8.0的enabled=1改成enabled=0即可二、安装mysql直接使用命令：1yum install mysql-community-server三、启动mysql服务1.启动1systemctl start mysqld或者1service mysqld start2.查看启动状态1systemctl status mysqld或者1service mysqld status3.设置开机启动123systemctl enable mysqldsystemctl daemon-reload四、配置及部分命令1.修改登录密码mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码，通过下面的方式找到root默认密码，然后登录mysql进行修改：1grep 'temporary password' /var/log/mysqld.log密码就是root@localhost冒号后面的全部字符2.本地MySQL客户端登录1mysql -uroot -p密码是上一步查询出来的，输入后回车然后修改密码：1set password for 'root'@'localhost'=password('xxxxxxxx');注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误通过msyql环境变量可以查看密码策略的相关信息（执行这一步需要先修改默认密码，即执行完上一步修改才可以，否则会报错：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.）1show variables like '%password%';1234567891011validate_password_policy：密码策略，默认为MEDIUM策略validate_password_dictionary_file：密码策略文件，策略为STRONG才需要validate_password_length：密码最少长度validate_password_mixed_case_count：大小写字符长度，至少1个validate_password_number_count ：数字至少1个validate_password_special_char_count：特殊字符至少1个上述参数是默认策略MEDIUM的密码检查规则修改密码策略：在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略：选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件1validate_password_policy=0如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：1validate_password = off重新启动mysql服务使配置生效：1systemctl restart mysqld3.添加远程登录用户默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户修改root用户远程访问权限：选择 mysql 数据库：1use mysql;在 mysql 数据库的 user 表中查看当前 root 用户的相关信息：1select host, user from user;查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问授权 root 用户的所有权限并设置远程访问1update user set host='%' where user ='root';指定用户IP远程访问1234# 若想避免mysql5.7的密码校验# set global validate_password_policy=0;GRANT ALL PRIVILEGES ON *.* TO 'root'@'xxx.xxx.xxx.xxx' IDENTIFIED BY 'password' WITH GRANT OPTION;然后使用下面命令使修改生效：1flush privileges;4.修改默认编码方式mysql8.0默认编码方式为utf8mb4，因此使用时不需要修改，可使用如下命令查看：1SHOW VARIABLES WHERE Variable_name LIKE 'character_set_%' OR Variable_name LIKE 'collation%';如果需要修改其他编码方式，方法有很多，以下仅为举例比如需要修改为utf8mb4，可以使用如下方式：修改mysql配置文件my.cnf（windows为my.ini）my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容：1234567891011121314[client]default-character-set = utf8mb4[mysql]default-character-set = utf8mb4[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect='SET NAMES utf8mb4'重启mysql即可collation_connection 、collation_database 、collation_server是什么没关系，但必须保证以下这几个变量必须是utf8mb4：character_set_client (客户端来源数据使用的字符集)character_set_connection (连接层字符集)character_set_database (当前选中数据库的默认字符集)character_set_results (查询结果字符集)character_set_server (默认的内部操作字符集)数据库连接参数中:characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测而autoReconnect=true是必须加上的第四步部署爬虫到服务器1.进入本地项目根目录，用scrapyd-deploy -l生成scrapy.cfg(最新的scrapy项目创建后就自带，无需再生成)，并且修改该文件123456[settings]default = LVideoSpider.settings[deploy:busishu] # busishu 是自己给定义的host名称url = http://公网IP:6800/project = LVideoSpider # project名称就是上面.settings的前一部分2.部署爬虫到服务器本地进入scrapy.cfg文件所在目录，执行scrapyd-deploy &lt;host名称&gt; -p &lt;project名称&gt;，如：1scrapyd-deploy busishu -p LVideoSpider成功后，服务器会返回一个json但是，我没成功，因为我的scrapy爬虫配置的MySQL连接信息，连接不上服务器的数据库，配置好后服务器端的数据库中却没有对应的表12345678910111213141516171819202122232425Server response (200):&#123;&quot;node_name&quot;: &quot;VM_0_14_centos&quot;, &quot;status&quot;: &quot;error&quot;, &quot;message&quot;: &quot;Traceback (most recent call last):\n File \&quot;/usr/local/python3/lib/python3.6/runpy.py\&quot;, line 193, in _run_module_as_main\n \&quot;__main__\&quot;, mod_spec)\n File \&quot;/usr/local/python3/lib/python3.6/runpy.py\&quot;, line 85, in _run_code\n exec(code, run_globals)\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapyd/runner.py\&quot;, line 40, in &lt;module&gt;\n main()\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapyd/runner.py\&quot;, line 37, in main\n execute()\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapy/cmdline.py\&quot;, line 145, in execute\n cmd.crawler_process = CrawlerProcess(settings)\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapy/crawler.py\&quot;, line 267, in __init__\n super(CrawlerProcess, self).__init__(settings)\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapy/crawler.py\&quot;, line 145, in __init__\n self.spider_loader = _get_spider_loader(settings)\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapy/crawler.py\&quot;, line 347, in _get_spider_loader\n return loader_cls.from_settings(settings.frozencopy())\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapy/spiderloader.py\&quot;, line 61, in from_settings\n return cls(settings)\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapy/spiderloader.py\&quot;, line 25, in __init__\n self._load_all_spiders()\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapy/spiderloader.py\&quot;, line 47, in _load_all_spiders\n for module in walk_modules(name):\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/scrapy/utils/misc.py\&quot;, line 73, in walk_modules\n submod = import_module(fullpath)\n File \&quot;/usr/local/python3/lib/python3.6/importlib/__init__.py\&quot;, line 126, in import_module\n return _bootstrap._gcd_import(name[level:], package, level)\n File \&quot;&lt;frozen importlib._bootstrap&gt;\&quot;, line 994, in _gcd_import\n File \&quot;&lt;frozen importlib._bootstrap&gt;\&quot;, line 971, in _find_and_load\n File \&quot;&lt;frozen importlib._bootstrap&gt;\&quot;, line 955, in _find_and_load_unlocked\n File \&quot;&lt;frozen importlib._bootstrap&gt;\&quot;, line 656, in _load_unlocked\n File \&quot;&lt;frozen importlib._bootstrap&gt;\&quot;, line 626, in _load_backward_compatible\n File \&quot;/tmp/LVideoSpider-1579927825-mwhuhl90.egg/LVideoSpider/spiders/lvideo.py\&quot;, line 15, in &lt;module&gt;\n File \&quot;/tmp/LVideoSpider-1579927825-mwhuhl90.egg/LVideoSpider/spiders/lvideo.py\&quot;, line 18, in LvideoSpider\n File \&quot;/tmp/LVideoSpider-1579927825-mwhuhl90.egg/LVideoSpider/spiders/source_data.py\&quot;, line 13, in get_source_data\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/pymysql/__init__.py\&quot;, line 94, in Connect\n return Connection(*args, **kwargs)\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/pymysql/connections.py\&quot;, line 325, in __init__\n self.connect()\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/pymysql/connections.py\&quot;, line 599, in connect\n self._request_authentication()\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/pymysql/connections.py\&quot;, line 861, in _request_authentication\n auth_packet = self._read_packet()\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/pymysql/connections.py\&quot;, line 684, in _read_packet\n packet.check_error()\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/pymysql/protocol.py\&quot;, line 220, in check_error\n err.raise_mysql_exception(self._data)\n File \&quot;/usr/local/python3/lib/python3.6/site-packages/pymysql/err.py\&quot;, line 109, in raise_mysql_exception\n raise errorclass(errno, errval)\npymysql.err.InternalError: (1049, \&quot;Unknown database &apos;lvideo&apos;\&quot;)\n&quot;&#125;所以我尝试在服务器端的数据库创建爬虫所需要的表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# 新建数据库lvideocreate database lvideo default character set utf8mb4 collate utf8mb4_general_ci;# 使用该数据库use lvideo;# 创建三表CREATE TABLE `video_source` ( `id` int(11) NOT NULL AUTO_INCREMENT, `domin` varchar(128) NOT NULL, `name` varchar(128) NOT NULL, `type` int(10) unsigned NOT NULL, `is_effect` int(10) unsigned NOT NULL, `format_page` varchar(512) NOT NULL, `created_time` datetime(6) NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;CREATE TABLE `video_videoinfo` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(512) NOT NULL, `alias` varchar(512) NOT NULL, `cover_url` varchar(512) NOT NULL, `director` varchar(512) NOT NULL, `actor` varchar(1024) NOT NULL, `first_type` varchar(256) NOT NULL, `second_type` varchar(256) NOT NULL, `region` varchar(256) NOT NULL, `update_time` varchar(128) NOT NULL, `nums` int(10) unsigned NOT NULL, `release_time` varchar(64) NOT NULL, `intro` longtext NOT NULL, `source` varchar(128) NOT NULL, `created_time` varchar(128) NOT NULL, `remark` varchar(512) NOT NULL, `pv` int(10) unsigned NOT NULL, `uv` int(10) unsigned NOT NULL, PRIMARY KEY (`id`), KEY `video_videoinfo_name_3495f1c0` (`name`), KEY `video_videoinfo_alias_0b3eabbd` (`alias`), KEY `video_videoinfo_release_time_8393c554` (`release_time`), KEY `update_time` (`update_time`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=38974 DEFAULT CHARSET=utf8mb4;CREATE TABLE `video_videolink` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(512) NOT NULL, `link` varchar(512) NOT NULL, `number` varchar(128) NOT NULL, `is_new` int(10) unsigned NOT NULL, `status` int(10) unsigned NOT NULL, `source` varchar(128) NOT NULL, `created_time` varchar(128) NOT NULL, PRIMARY KEY (`id`), KEY `name` (`name`) USING BTREE, KEY `link` (`link`) USING BTREE, KEY `number` (`number`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=235037 DEFAULT CHARSET=utf8mb4;# 插入起始所需的数据源insert into video_source(`domin`,`name`,`type`,`is_effect`,`format_page`,`created_time`) values(&apos;kuyunzy.tv&apos;,&apos;kuyun&apos;,1,1,&apos;http://www.kuyunzy.tv/?m=vod-index-pg-&#123;&#125;.html&apos;,&apos;2020-01-07 09:07:41.466798&apos;);然后成功再执行命令就成功了12Server response (200):&#123;"node_name": "VM_0_14_centos", "status": "ok", "project": "LVideoSpider", "version": "1579928601", "spiders": 1&#125;本地检查爬虫是否部署成功，这里的实际上是你deploy的目标，不是项目名称1scrapyd-deploy -L &lt;host&gt;若有爬虫成功部署则会返回你部署的项目名称12D:\Python\PycharmProject\LVideoSpider&gt;scrapyd-deploy -L busishuLVideoSpider也可以用scrapyd-deploy -l查看检查在服务器上部署的项目1curl http://&lt;服务器公网IP&gt;:6800/listprojects.json检查服务器上部署的某个项目的爬虫1curl http://&lt;IP&gt;:6800/listspiders.json?project=&lt;项目名称&gt;删除服务器上部署的项目1curl http://&lt;IP&gt;:6800/delproject.json -d project=&lt;项目名称&gt;第五步在服务器端操作爬虫12345678# 运行爬虫curl http://&lt;公网IP&gt;:6800/schedule.json -d project=&lt;项目名称&gt; -d spider=&lt;爬虫名称&gt;# 后台运行nohup curl http://&lt;公网IP&gt;:6800/schedule.json -d project=&lt;项目名称&gt; -d spider=&lt;爬虫名称&gt; &amp;# 停止爬虫curl http://&lt;公网IP&gt;:6800/cancel.json -d project=&lt;项目名称&gt; -d job=&lt;JOBID&gt;若需要向爬虫传递命令参数和设置DOWNLOAD_DELAY：1234curl http://localhost:6800/schedule.json -d project=myproject -d spider=somespider -d setting=DOWNLOAD_DELAY=2 -d arg1=val1# 我的例子，额外传递参数pages=20curl http://IP:6800/schedule.json -d project=LVideoSpider -d spider=lvideo -d pages=20win系统curl需要下载, 然后将解压目录下的bin目录加入path环境变量中即可在windows的命令行使用第六步追加使用spiderkeeper来实现爬虫的定时功能在原来的基础上安装以下依赖：12pip3 install scrapy_redis pip3 install spiderkeeper前面已经修改过可以使外网访问到我们的IP，但是还需要开通另一个安全组入口配置5000(spiderkeeper)运行spiderkeeper(我这里还真奇了怪了，很多人的博客都说直接输入spiderkeeper就能启动，我试了半天啥都没有，最后跟前面的一样加上所在的路径才成功启动，难道我pip3安装了个鬼？)123456'/usr/local/python3/bin/spiderkeeper'# 后台运行[root@VM_0_14_centos ~]# nohup '/usr/local/python3/bin/spiderkeeper' &amp; [1] 17355[root@VM_0_14_centos ~]# nohup: ignoring input and appending output to ‘nohup.out’要想直接输入spiderkeeper就运行，需要创建软连接，scrapyd也是同理：1ln -s /usr/local/python3/bin/spiderkeeper /usr/bin/spiderkeeper之后直接输入spiderkeeper就能运行spiderkeeper了！！！接着我们访问http://IP:5000，账号密码初始都是admin接着在本地项目根目录下给爬虫打包1scrapyd-deploy --build-egg output.egg12D:\Python\PycharmProject\LVideoSpider&gt;scrapyd-deploy --build-egg output.eggWriting egg to output.egg然后在spiderkeeper可视化界面点击creat project，点击创建，跳到deploy界面，上传output.egg文件，点击submit若出现deploy success说明部署成功部署完后，点击Dashboard这个按钮，再选择你创建的项目，然后点击RunOnce按钮创建爬虫点击后会出现其中Args可以让你输入传给爬虫的参数，这里我传入的参数就是爬取的页数，其他选项一般不用动，然后点击CREATE，刷新页面就可以看到你的爬虫正在运行了Periodic Jobs定时任务，点击右上角的addjobs后可以添加任务，除了之前有的选项之后还可以设置每个月/每星期/每天/每小时/每分钟 的定时爬虫12m h dom mon dow0 0/4 * * * # 每隔4小时运行一次Running Stats查看爬虫的运行情况，只能显示时间段爬虫的存活情况Manage如果要删除任务可以在这里删除总结现在scrapyd一直在服务器后台运行着，只要本地执行命令就可以把本地的scrapy项目部署上去，然后可以在cmd命令行或者服务器端输入curl命令来启动爬虫等操作加入spiderkeeper后，spiderkeeper同时运行在服务器端，只要把本地项目生成的egg上传到spiderkeeper，就可以在spiderkeeper这个可视化界面上运行爬虫，设置定时爬取等参考部署scrapy项目到腾讯云服务器，并操作爬虫centos7中安装python3python3 编译优化 –enable-shared –enable-optimizations腾讯云Centos7 安装Mysql5.7Scrapyd documentationWindows安装curl及基本命令在linux下安装并运行scrapydSpiderKeeper的使用m h dom mon dow]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地项目提交至GitHub仓库简述]]></title>
    <url>%2F%2Fblog%2F%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E8%87%B3GitHub%E4%BB%93%E5%BA%93%E7%AE%80%E8%BF%B0.html</url>
    <content type="text"><![CDATA[适用情况：本地有一个项目，github上新建了一个仓库只需要进行下面几步就能把本地项目上传到Github：1、在本地创建一个版本库（即文件夹），通过git init把它变成Git仓库2、把项目下的文件复制到这个文件夹里面，再通过git add .把项目添加到仓库3、再通过git commit -m “注释内容”把项目提交到仓库4、看C盘的用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，没有就通过下面命令创建1ssh-keygen -t rsa -C "youremail@example.com"然后登录Github，找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密5、新建一个远程仓库，通过git remote add origin https://github.com/xxx/xxx.git将本地仓库和远程仓库进行关联6、最后通过1git push -u origin master把本地仓库的项目推送到远程仓库（也就是Github）上，（若新建远程仓库的时候自动创建了README文件会报错，error: failed to push some refs to &#39;https://github.com/xxx/xxx.git&#39; ）这时候可以，强制合并1git push -u origin master --force以后只需要git push origin master即可]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pymysql流式游标]]></title>
    <url>%2F%2Fblog%2Fpymysql%E6%B5%81%E5%BC%8F%E6%B8%B8%E6%A0%87.html</url>
    <content type="text"><![CDATA[Python通过pymysql操作向mysql读取千万、百万级别的数据库时如果用传统的fetchall()或fetchone()方法，都是先默认在内存里缓存下所有行然后再处理，大量的数据会导致内存资源消耗光，内存容易溢出此时则建议使用SSCursor(流式游标)，避免客户端占用大量内存这个 cursor 实际上没有缓存下来任何数据，它不会读取所有所有到内存中，它的做法是从储存块中读取记录，并且一条一条返回给你,使用迭代器而不用 fetchall ,即省内存又能很快拿到数据例：1234567891011121314151617def select_pan_url(self): db = pymysql.connect(host='localhost', port=3306, user='root', passwd='', db='') cursor = db.cursor(cursor=pymysql.cursors.SSDictCursor) select_sql = "select `name`, `detail_url`, `pan_title`, `pan_psw`, `pan_real_url` from agepan_wj" try: cursor.execute(select_sql) # 在处理大量数据时可以分割进行 datas = cursor.fetchall() for pan in datas: self.row_lists.append(pan) except Exception as e: print('取数据失败', e) db.rollback() finally: cursor.close() db.close()需要注意的是：因为SSCursor是没有缓存的游标，结果集只要没取完，这个connect是不能再处理别的sql，包括另外生成一个cursor 也不行的，如果需要干别的，请另外再生成一个连接对象每次读取后处理数据要快，不能超过 60 s，否则mysql将会断开这次连接也可以修改SET NET_WRITE_TIMEOUT = xx来增加超时间隔]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>mysql</tag>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy命令行动态传参给spider]]></title>
    <url>%2F%2Fblog%2FScrapy%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8A%A8%E6%80%81%E4%BC%A0%E5%8F%82%E7%BB%99spider.html</url>
    <content type="text"><![CDATA[scrapy命令行执行传递多个参数给spider 动态传参在命令行运行scrapy爬虫1scrapy crawl spider_name若爬虫中有参数可以控制爬取的页数，那么想要在输入命令行命令时传递页数给爬虫，就可以这样做在spider中定义一个构造函数12345678910111213141516171819def __init__(self, pages=None, *args, **kwargs): super(LvideoSpider, self).__init__(*args, **kwargs) # super().__init__(**kwargs) self.pages = pages ...def parse(self, response): pages = re.findall(r'当前:1/(\d+)页', response.text, re.S)[0] link = response.meta['format_page'] # 如果self.pages存在，那么就会代替正则取到的页数 if self.pages: pages = self.pages print('共' + str(pages) + '页') for page in range(1, int(pages) + 1): page_link = link.format(page) yield Request(page_link, callback=self.parse_video_link, meta=&#123;'soucre_name': response.meta['soucre_name'], 'domin': response.meta['domin'], 'page_link': page_link&#125;, dont_filter=True)然后在启动scrapy的时候就可以赋予参数的值：1scrapy crawl spider_name -a pages=10这样就控制了爬取页数为10页]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scarpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql保存数据时含有单引号报错方法]]></title>
    <url>%2F%2Fblog%2FPython%E6%93%8D%E4%BD%9Cmysql%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E6%97%B6%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%90%AB%E6%9C%89%E5%8D%95%E5%BC%95%E5%8F%B7%E6%8A%A5%E9%94%99%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[方法mysql在保存视频名称时遇到的数据插入错误，查一下原因发现报错视频名称主要都带有&#39;单引号，会导致SQL语句被截断，从而产生错误解决办法如下：替换成两个单引号即可1name = str(name).replace('\'', '\'\'')]]></content>
      <categories>
        <category>Bug</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写作备忘]]></title>
    <url>%2F%2Fblog%2F%E5%86%99%E4%BD%9C%E5%A4%87%E5%BF%98.html</url>
    <content type="text"><![CDATA[写作备忘新建博文进入xxx\joelYing.github.io文件夹下，右键Git Bash Here在打开的Git Bash中输入hexo n &quot;标题&quot;即可生成对应文章标题的.md文件，然后在xxx\joelYing.github.io\source\_posts\xxx.md下就可以写文章了保存发布在打开的Git Bash中输入hexo clean &amp;&amp; hexo g &amp;&amp; hexo d提交GitHub分支git add .git commit -m &quot;hexo source&quot;git push origin source]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3百度云资源自动保存]]></title>
    <url>%2F%2Fblog%2FPython3%E7%99%BE%E5%BA%A6%E4%BA%91%E8%B5%84%E6%BA%90%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98.html</url>
    <content type="text"><![CDATA[百度云盘资源自动转存Python3实现百度云盘资源自动转存，解决带有密码的分享链接自动转存，不含密码的资源自动转存，同时实现post请求转存以及selenium转存前言最近看上了一个免费的动漫网站，资源一出更得巨快，而且有很多的网盘资源，于是想……于是写了一段代码，爬取了网站的全部资源然后就该一个个的保存到我的云盘中了，问题是手动的话1900多个得累死人，所以就打算通过Python来做一开始的想法是拿selenium来操作，但是又好奇有没有通过普通的爬虫思路来做这件事，于是下面把摸索的过程也加上了分析&amp;代码分析目标，通过从数据库取出的资源链接以及密码，构造并发送请求，然后可以进入资源的保存页面，再通过selenium来点击操作首先网盘带密码的提取链接是这样的https://pan.baidu.com/share/init?surl=xxx而不需要密码可以直接提取资源的链接是这样的https://pan.baidu.com/s/1xxx跟输入密码后跳转的提取页面差不多，注意，以上两个xxx的内容一致，有个1是从web端访问的固有参数，后面会提到我们在输入密码后就可以进去，那么关键就是提交密码的过程是怎样的，按照常理按f12打开开发者工具，在输入密码的页面输入密码后，点击提取文件这里有一定可能你会出现404找不到资源的页面，当然你可以用fiddler抓包就肯定可以抓到我们找到关键的请求这个post请求在发送时带上了一系列的参数，以及密码下面的就是跳转的资源页面，而这个是一个get请求，没有带上其他的参数，但是你单拿出来直接去访问的话（从没有输过密码的时候），会直接被跳转到输入密码的页面，那么问题来了，为什么会这样有经验的能比较准的猜测可能是这两个请求的cookie中有差异，因为逻辑上我输入密码后的post请求会返回一个参数，而这个参数既没有体现在第二个请求的url上，也没有可以携带的formdata，所以可能是在cookie中存在差异事实证明两个请求的cookie确实有不同，关键在于https://pan.baidu.com/s/1xxx的cookie中的BDCLND正好是https://pan.baidu.com/share/verify?surl=5RdjtVK55eEuayvz82cDmg&amp;t=1579432835477&amp;channel=chunlei&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d&amp;logid=MTU3OTQzMjgzNTQ3OTAuNjM2MDg4OTgzOTY3MzU0OQ==&amp;clienttype=0返回的参数中的一个值，如图：也就是说我们要取得这个参数后再访问 https://pan.baidu.com/s/1xxx 时带上这个cookie才可以不被返回到输入密码的页面那接下来就是如何获取这个参数的问题，我长话短说对比分析多个post链接可以知道，链接中https://pan.baidu.com/share/verify?surl=5RdjtVK55eEuayvz82cDmg&amp;t=1579432835477&amp;channel=chunlei&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d&amp;logid=MTU3OTQzMjgzNTQ3OTAuNjM2MDg4OTgzOTY3MzU0OQ==&amp;clienttype=0参数值状态surl5RdjtVK55eEuayvz82cDmg相当于资源的ID，已知t157943283547713位时间戳channelchunlei反正是固定的（春雷？）web1固定，也就是前面提到过的app_id250528固定bdstoken08a7da93cf25d7935788a123e3e10c3d固定logidMTU3OTQzMjgzNTQ3OTAuNjM2MDg4OTgzOTY3MzU0OQ==变化clienttype0固定就只有logid是改变的，然后我找了找，应该是在js中产生的，最后在这里找到了这段js生成代码具体如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677 var u = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/~！@#￥%……&amp;" , l = String.fromCharCode , d = function(e) &#123; if (e.length &lt; 2) &#123; var n = e.charCodeAt(0); return 128 &gt; n ? e : 2048 &gt; n ? l(192 | n &gt;&gt;&gt; 6) + l(128 | 63 &amp; n) : l(224 | n &gt;&gt;&gt; 12 &amp; 15) + l(128 | n &gt;&gt;&gt; 6 &amp; 63) + l(128 | 63 &amp; n) &#125; var n = 65536 + 1024 * (e.charCodeAt(0) - 55296) + (e.charCodeAt(1) - 56320); return l(240 | n &gt;&gt;&gt; 18 &amp; 7) + l(128 | n &gt;&gt;&gt; 12 &amp; 63) + l(128 | n &gt;&gt;&gt; 6 &amp; 63) + l(128 | 63 &amp; n) &#125; , f = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g , g = function(e) &#123; return (e + "" + Math.random()).replace(f, d) &#125; , h = function(e) &#123; var n = [0, 2, 1][e.length % 3] , t = e.charCodeAt(0) &lt;&lt; 16 | (e.length &gt; 1 ? e.charCodeAt(1) : 0) &lt;&lt; 8 | (e.length &gt; 2 ? e.charCodeAt(2) : 0) , o = [u.charAt(t &gt;&gt;&gt; 18), u.charAt(t &gt;&gt;&gt; 12 &amp; 63), n &gt;= 2 ? "=" : u.charAt(t &gt;&gt;&gt; 6 &amp; 63), n &gt;= 1 ? "=" : u.charAt(63 &amp; t)]; return o.join("") &#125; , m = function(e) &#123; return e.replace(/[\s\S]&#123;1,3&#125;/g, h) &#125; , p = function() &#123; return m(g((new Date).getTime())) &#125; , w = function(e, n) &#123; return n ? p(String(e)).replace(/[+\/]/g, function(e) &#123; return "+" == e ? "-" : "_" &#125;).replace(/=/g, "") : p(String(e)) &#125;; !function() &#123; r(document).ajaxSend(function(e, n, t) &#123; var i = w(s.getCookie("BAIDUID")); ... &#125;) &#125;(),``` 主要是这段内容，通过一系列的方法来生成`logid`，由于比较复杂，所以决定通过第三方库`execjs`来调用，把这一段js稍加调整``` javascriptvar u = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/~！@#￥%……&amp;",l = String.fromCharCode,d = function(e) &#123; if (e.length &lt; 2) &#123; var n = e.charCodeAt(0); return 128 &gt; n ? e : 2048 &gt; n ? l(192 | n &gt;&gt;&gt; 6) + l(128 | 63 &amp; n) : l(224 | n &gt;&gt;&gt; 12 &amp; 15) + l(128 | n &gt;&gt;&gt; 6 &amp; 63) + l(128 | 63 &amp; n) &#125; var n = 65536 + 1024 * (e.charCodeAt(0) - 55296) + (e.charCodeAt(1) - 56320); return l(240 | n &gt;&gt;&gt; 18 &amp; 7) + l(128 | n &gt;&gt;&gt; 12 &amp; 63) + l(128 | n &gt;&gt;&gt; 6 &amp; 63) + l(128 | 63 &amp; n)&#125;,f = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,g = function(e) &#123; return (e + "" + Math.random()).replace(f, d)&#125;,h = function(e) &#123; var n = [0, 2, 1][e.length % 3], t = e.charCodeAt(0) &lt;&lt; 16 | (e.length &gt; 1 ? e.charCodeAt(1) : 0) &lt;&lt; 8 | (e.length &gt; 2 ? e.charCodeAt(2) : 0), o = [u.charAt(t &gt;&gt;&gt; 18), u.charAt(t &gt;&gt;&gt; 12 &amp; 63), n &gt;= 2 ? "=" : u.charAt(t &gt;&gt;&gt; 6 &amp; 63), n &gt;= 1 ? "=" : u.charAt(63 &amp; t)]; return o.join("")&#125;,m = function(e) &#123; return e.replace(/[\s\S]&#123;1,3&#125;/g, h)&#125;,p = function() &#123; return m(g((new Date).getTime()))&#125;,w = function(e, n) &#123; return n ? p(String(e)).replace(/[+\/]/g, function(e) &#123; return "+" == e ? "-" : "_" &#125;).replace(/=/g, "") : p(String(e)) &#125;;function getLogId(data)&#123; var logid = w(data); return logid;&#125;然后我们调用的时候，输入BAIDUID即可，这个可以在最早的输入密码页面的cookie中取得安装execjs 注意，你没看错，命令就是输的pyexecjs：1pip install pyexecjs因为Node.js 是Javascript语言服务器端运行环境，所以你还需要安装nodejs安装好的情况下在Python3环境下你可以看到12345Python 3.6.3 (v3.6.3:2c5fed8, Oct 3 2017, 17:26:49) [MSC v.1900 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import execjs&gt;&gt;&gt; execjs.get().name'Node.js (V8)'然后来调用123456789# 读入修改好的js代码文件def get_logid(self, baidu_id): with open('boot.js', encoding='utf-8') as f: bootjs = f.read() # 编译js代码 js_obj = execjs.compile(bootjs) # 调用getLogId方法，给参数baidu_id，也就是BAIDUID，然后得到输出 res = js_obj.call('getLogId', baidu_id) return res这是测试发送请求的代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162def __init__(self): # 从数据库中取资源链接及密码后存放的列表 self.row_lists = [] # 带上密码请求的需要format的链接 self.pan_post = 'https://pan.baidu.com/share/verify?surl=&#123;&#125;&amp;t=&#123;&#125;&amp;channel=chunlei' \ '&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d' \ '&amp;logid=&#123;&#125;&amp;clienttype=0' # 13位的时间戳 self.t = int(round(time.time() * 1000)) # 自己弄得随机ua self.user_agent = FaUa.get_ua()def get_logid(self, baidu_id): with open('boot.js', encoding='utf-8') as f: bootjs = f.read() js_obj = execjs.compile(bootjs) res = js_obj.call('getLogId', baidu_id) return resdef test(self): # 保持会话 session = requests.session() # 需要提取的资源链接 s_url = 'https://pan.baidu.com/share/init?surl=5RdjtVK55eEuayvz82cDmg' # verify=False 可以一定程度上避免多次访问导致对方服务器封你，但是会出现警告，这是还需在前面加上加一条requests.packages.urllib3.disable_warnings()，即禁用安全请求警告 r_bid = session.get(s_url, headers=&#123;'user-agent': self.user_agent&#125;, verify=False) # 拿到cookie中的BAIDUID baiduid = r_bid.cookies['BAIDUID'] # 根据BAIDUID得到返回的logid logid = self.get_logid(baiduid) # 获取资源的链接后一部分ID surl = s_url.split('surl=')[1] # post请求的参数，带上密码，后两个为空 data = &#123; 'pwd': 'xxx', 'vcode': '', 'vcode_str': '', &#125; # 请求头 headers = &#123; 'user-agent':self.user_agent, 'Referer': 'https://pan.baidu.com/share/init?surl=5RdjtVK55eEuayvz82cDmg', 'Accept':'*/*', 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8', 'X-Requested-With':'XMLHttpRequest', 'Accept-Language':'zh-CN', 'Accept-Encoding':'gzip, deflate', 'Host':'pan.baidu.com', 'DNT':'1', 'Connection': 'Keep-Alive', 'Cache-Control': 'no-cache', &#125; # 发送post请求 r = session.post(self.pan_post.format(surl, self.t, logid), data=data, headers=headers, verify=False) print(r.url, r.text) # 得到返回的BDCLND ，在下一个请求的cookie中带上 BDCLND = r.json()['randsk'] headers['Cookie'] = 'BDCLND=' + BDCLND print(headers) r2 = session.get('https://pan.baidu.com/s/15RdjtVK55eEuayvz82cDmg', headers=headers, verify=False) r2.encoding = 'utf-8' print(r2.text)这是返回的页面结果12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=7,9,10,11" /&gt;&lt;meta name="renderer" content="webkit"&gt;&lt;script src="/sns/box-static/disk-share/js/share.dp.js?t=1578364180271"&gt;&lt;/script&gt;&lt;link rel="shortcut icon" href="/res/static/images/favicon.ico"/&gt;&lt;script src="/sns/box-static/disk-share/js/mod.js?t=1578364180271"&gt;&lt;/script&gt;&lt;link rel="stylesheet" type="text/css" href="/box-static/consult/base.css"/&gt;&lt;link rel="stylesheet" type="text/css" href="/box-static/consult/system-core.css"/&gt;&lt;script src="/box-static/consult/base.js"&gt;&lt;/script&gt;&lt;script src="/box-static/consult/system-core.js"&gt;&lt;/script&gt;&lt;link rel="stylesheet" type="text/css" href="/box-static/consult/function.css"/&gt;...&lt;div class="slide-show-left"&gt;&lt;h2 class="file-name" title="文件名"&gt;&lt;em class="global-icon-16"&gt;&lt;/em&gt;文件名&lt;/h2&gt;&lt;/div&gt;&lt;div class="slide-show-right"&gt;&lt;span class="slide-header-funcs"&gt;&lt;/span&gt;&lt;div class="module-share-top-bar g-clearfix"&gt;&lt;div class="bar"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="cb"&gt;&lt;/div&gt;&lt;div class="slide-show-other-infos"&gt;&lt;div class="share-file-info"&gt;&lt;span&gt;2020-01-15 19:22&lt;/span&gt;&lt;/div&gt;&lt;div class="share-valid-check"&gt;失效时间：永久有效&lt;/div&gt;&lt;div class="slide-show-other-cns clearfix"&gt;&lt;span class="title-funcs"&gt;&lt;span class="funcs-share-area"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="cb"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="share-list" id="shareqr"&gt;&lt;div class="module-toolbar g-clearfix"&gt;&lt;div class="default-dom"&gt;&lt;div class="list-grid-switch list-switched-on"&gt;&lt;a class="list-switch" href="javascript:void(0)" node-type="kyzmAM0B" style="display:none"&gt;&lt;/a&gt;&lt;a class="grid-switch" href="javascript:void(0)" node-type="xgcvwQNp"&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="after-dom"&gt;&lt;/div&gt;&lt;div class="user-dom"&gt;&lt;/div&gt;&lt;/div&gt;&lt;!--[if IE]&gt;&lt;iframe id="historyIFrameEmulator" style="display: none"&gt;&lt;/iframe&gt;&lt;![endif]--&gt;&lt;div node-type="KPDwCE" class="KPDwCE"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="ad-platform-tips ad-multi-tips" node-type="share-mutil-bottom" id="web-multi-bottom" node-id="web-sharemultibanner"&gt;&lt;div style="margin: 0 auto; width: 960px;" id="cpro_u2164871"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="bd-aside"&gt;&lt;div node-type="module" class="module-share-person-info"&gt;&lt;div class="share-person-inner global-clearfix haha"&gt;&lt;div class="share-person-avatar"&gt;&lt;a href="//yun.baidu.com/buy/center?tag=1&amp;from=sicon" class="vip-icon sicon" target="_blank"&gt;&lt;em&gt;&lt;/em&gt;&lt;/a&gt;&lt;a href="javascript:void(0)" title="去Ta的分享主页" class="person-icon"&gt;&lt;img alt="fci****re2" src="https://ss0.bdstatic.com/7Ls0a8Sm1A5BphGlnYG/sys/portrait/item/netdisk.1.46160ad.44gPu69hQcgfXwSxAB1nrQ.jpg"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="share-person-data self"&gt;&lt;div class="share-person-data-top"&gt;&lt;a href="/share/home?uk=3821724077&amp;suk=euEHLsAO_SkKFFGZ7JnePA" target="_blank" title="去Ta的分享主页" class="share-person-username global-ellipsis"&gt;fci****re2&lt;/a&gt;&lt;a href="//yun.baidu.com/buy/center?tag=8&amp;from=sicon" class="svip-icon sicon"&gt;&lt;em&gt;&lt;/em&gt;...ok，以上就是摸索的内容，主要摸清楚了输入密码后跳转的logid如何取得，这样一来我们在拿到 https://pan.baidu.com/share/init?surl=xxx 这样的链接和密码时，就可以通过代码实现批量输入密码后获得访问资源文件页面的权限那么如何通过请求做到创建新文件夹以及转存呢我们对把一个资源转存自己盘中的操作进行抓包（第一步是创建一个文件夹，然后第二步再把资源存到这个文件夹中）这样一来我们就可以看到有两个明显的请求：12# 创建文件夹的请求https://pan.baidu.com/api/create?a=commit&amp;channel=chunlei&amp;app_id=250528&amp;bdstoken=undefined&amp;channel=chunlei&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d&amp;logid=MTU3OTYwNDg1NTE3ODAuNTkxMDExODM4OTIwNDg1Mw==&amp;clienttype=012# 转存资源的请求https://pan.baidu.com/share/transfer?shareid=3153250388&amp;from=3821724077&amp;ondup=newcopy&amp;async=1&amp;channel=chunlei&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d&amp;logid=MTU3OTYwNDg1NTE3ODAuNTkxMDExODM4OTIwNDg1Mw==&amp;clienttype=0先来看创建文件夹部分的这个post请求：https://pan.baidu.com/api/create?a=commit&amp;channel=chunlei&amp;app_id=250528&amp;bdstoken=undefined&amp;channel=chunlei&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d&amp;logid=MTU3OTYwNDg1NTE3ODAuNTkxMDExODM4OTIwNDg1Mw==&amp;clienttype=0querystring跟上面差不多，就只有logid需要改动，主要的是携带的data参数值状态isdir1固定size空固定methodpost固定dataTypejson固定path/动漫/斗罗大陆-20180062 01-最新话自定义可以看出其他的都不用动，在我们发送post请求时只要再带上自定义的path就可以了123456789101112131415161718192021222324252627self.create_dir_post = 'https://pan.baidu.com/api/create?a=commit&amp;channel=chunlei' \ '&amp;app_id=250528&amp;bdstoken=undefined&amp;channel=chunlei&amp;web=1' \ '&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d' \ '&amp;logid=&#123;&#125;&amp;clienttype=0'self.headers = &#123; 'User-Agent': self.user_agent, 'Host': 'pan.baidu.com', 'Connection': 'keep-alive', 'Accept': 'application/json, text/javascript, */*; q=0.01', 'Origin': 'https://pan.baidu.com', 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh;q=0.9', &#125;logid = self.get_logid(baiduid)create_path = '/动漫/' + source_filename # 新建文件夹请求所需的data参数self.create_dir_data['path'] = create_pathself.headers['Referer'] = s_urlself.headers['Cookie'] = bdclnd + ';' + self._stoken_bdussr_create_dir = requests.post(self.create_dir_post.format(logid), data=self.create_dir_data, headers=self.headers, verify=False)print(r_create_dir.json())请求成功后你就可以看到在你的网盘中创建了一个自己命名的文件夹而下一个post就是实现转存内容的https://pan.baidu.com/share/transfer?shareid=3153250388&amp;from=3821724077&amp;ondup=newcopy&amp;async=1&amp;channel=chunlei&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d&amp;logid=MTU3OTYwNDg1NTE3ODAuNTkxMDExODM4OTIwNDg1Mw==&amp;clienttype=0参数值状态shareid3153250388变化from3821724077变化logidMTU3OTYwNDg1NTE3ODAuNTkxMDExODM4OTIwNDg1Mw==变化除了这三个其他querystring中的参数都是固定的，再来看post携带的data参数值状态fsidlist[597498773956140]变化path/动漫/斗罗大陆-20180062 01-最新话变化path是需要你自己构造的，而logid，我们之前已经讲到过生成方法，最关键的就是剩下的三个参数：shareid， from， fsidlist这参数要在哪里找得到呢实际上仔细想想，这三个参数肯定在之前的页面源代码或者Js代码中有，之前我们已经可以成功访问 https://pan.baidu.com/s/1xxx 这样的页面了，但是没有注意这个页面的页面源代码有哪些内容，再一想这三个参数是在转存的时候用的，而转存的页面正好是在这个 https://pan.baidu.com/s/1xxx 页面那么我们观察一下这个页面的源代码就不难发现，有这么些内容12345678910111213141516171819202122232425yunData.SHAREPAGETYPE = "multi_file";yunData.MYUK = "4503602932392500";yunData.SHARE_USER_NAME = "fci****re2";// 这个就是share_id -----------------------------------yunData.SHARE_ID = "3151703641";yunData.SIGN = "8e9fc93e128935d2b43ed0cb267c8bca964e33af";yunData.sign = "8e9fc93e128935d2b43ed0cb267c8bca964e33af";yunData.TIMESTAMP = "1579608010";// 这个就是from -----------------------------------yunData.SHARE_UK = "3821724077";yunData.SHARE_PUBLIC = 0;yunData.SHARE_TIME = "1579087633";yunData.SHARE_DESCRIPTION = "";yunData.MYSELF = +false;yunData.MYAVATAR = "https:\/\/ss0.bdstatic.com\/7Ls0a8Sm1A5BphGlnYG\/sys\/portrait\/item\/netdisk.1.c8d8ac7b.54y40Nw_2ayb-Pg7hPetiA.jpg"; yunData.NOVELID = ""; // 这个就是fsidlist ----------------------------------- yunData.FS_ID = "540067849856680";yunData.FILENAME = "20190069 科学的超电磁炮T";yunData.PATH = "\/sharelink3821724077-540067849856680\/20190069 科学的超电磁炮T";yunData.PATH_MD5 = "10451130099679229426";yunData.CTIME = "1579087633";yunData.CATEGORY = "6";那么只要能够访问这个页面，然后用正则提取出来这三个参数，再构造url发送请求不就解决了嘛这就是最后的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091 self._stoken_bduss = '这一部分自己在浏览器的cookie中复制粘贴' self.pan_post = 'https://pan.baidu.com/share/verify?surl=&#123;&#125;&amp;t=&#123;&#125;&amp;channel=chunlei' \ '&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d' \ '&amp;logid=&#123;&#125;&amp;clienttype=0' self.create_dir_post = 'https://pan.baidu.com/api/create?a=commit&amp;channel=chunlei' \ '&amp;app_id=250528&amp;bdstoken=undefined&amp;channel=chunlei&amp;web=1' \ '&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d' \ '&amp;logid=&#123;&#125;&amp;clienttype=0' self.transfer_post = 'https://pan.baidu.com/share/transfer?shareid=&#123;&#125;' \ '&amp;from=&#123;&#125;&amp;ondup=newcopy&amp;async=1&amp;channel=chunlei' \ '&amp;web=1&amp;app_id=250528&amp;bdstoken=08a7da93cf25d7935788a123e3e10c3d' \ '&amp;logid=&#123;&#125;&amp;clienttype=0' self.pan_s_url = 'https://pan.baidu.com/s/1&#123;&#125;' self.create_dir_data = &#123; 'isdir': '1', 'size': '', 'block_list': [], 'method': 'post', 'dataType': 'json' &#125; self.pwd_data = &#123; 'vcode': '', 'vcode_str': '', &#125; self.headers = &#123; 'User-Agent': self.user_agent, 'Host': 'pan.baidu.com', 'Connection': 'keep-alive', 'Accept': 'application/json, text/javascript, */*; q=0.01', 'Origin': 'https://pan.baidu.com', 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', 'Sec-Fetch-Site': 'same-origin', 'Sec-Fetch-Mode': 'cors', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh;q=0.9', &#125; self.t = int(round(time.time() * 1000))def get_logid(self, baidu_id): with open('boot.js', encoding='utf-8') as f: bootjs = f.read() js_obj = execjs.compile(bootjs) res = js_obj.call('getLogId', baidu_id) # print(res) return resdef enter_pwd(self, source_filename, pan_url, pan_pwd): """ 通过execjs运行生成logid的代码，获取后跟密码等参数一起发送post请求，将返回的BDCLND参数作为cookie加入到get 'https://pan.baidu.com/s/1xxx' 的请求头中，可以正常访问资源文件页面 """ session = requests.session() # 请求需要密码的网盘资源的url；verify=False 避免频繁尝试被封，断开SSL，但是这个请求是不安全的 r_baiduid = session.get(pan_url, headers=&#123;'user-agent': self.user_agent&#125;, verify=False) # 获得当前的BAIDUID用于生成logid baiduid = r_baiduid.cookies['BAIDUID'] logid = self.get_logid(baiduid) surl = pan_url.split('surl=')[1] self.pwd_data['pwd'] = pan_pwd self.headers['Referer'] = pan_url # 带密码的post请求，成功可以访问'https://pan.baidu.com/s/1xxx'页面 r = session.post(self.pan_post.format(surl, self.t, logid), data=self.pwd_data, headers=self.headers, verify=False) # 返回带有randsk的json数据，取得bdclnd bdclnd = 'BDCLND=' + r.json()['randsk'] # 访问'https://pan.baidu.com/s/1xxx'的请求头 self.headers['Cookie'] = bdclnd # 'https://pan.baidu.com/s/1xxx' s_url = self.pan_s_url.format(surl) r_s_url = session.get(s_url, headers=self.headers, verify=False) r_s_url.encoding = 'utf-8' # 利用正则 获取 转存资源的post请求 所需的三个参数 params = re.findall(r'yunData\.SHARE_ID = "(.*?)";.*?yunData\.SHARE_UK = "(.*?)";.*?yunData\.FS_ID = "(.*?)";', r_s_url.text, re.S)[0] # 调用新建文件夹以及转存的请求 self.create_dir(baiduid, s_url, source_filename, params, bdclnd)def create_dir(self, baiduid, s_url, source_filename, params, bdclnd): logid = self.get_logid(baiduid) shareid, from_id, fsidlist = params[0], params[1], params[2] transfer_url = self.transfer_post.format(shareid, from_id, logid) create_path = '/动漫/' + source_filename # 新建文件夹请求所需的data参数 self.create_dir_data['path'] = create_path self.headers['Referer'] = s_url self.headers['Cookie'] = bdclnd + ';' + self._stoken_bduss # 需要两个参数BDUSS，STOKEN r_create_dir = requests.post(self.create_dir_post.format(logid), data=self.create_dir_data, headers=self.headers, verify=False) print(r_create_dir.json()) # 需要三个参数BDUSS，BDCLND，STOKEN r_transfer = requests.post(transfer_url, data=&#123;'fsidlist': '[' + str(fsidlist) + ']', 'path': create_path&#125;, headers=self.headers, verify=False) print(r_transfer.text)解释一下 source_filename, pan_url, pan_pwd这三个参数分别是path的一部分，资源的链接，资源的密码另外还有selenium的操作版本，我就直接放代码了Selenium操作1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162def s_enter_pwd(self, source_filename, pan_url, pan_pwd): """ selenium操作的输入密码 """ browser = webdriver.Chrome() browser.get(pan_url) time.sleep(3) if '404' in browser.current_url: print('404，找不到页面') self.update_status(pan_url) time.sleep(10) browser.close() # print(browser.page_source) # 自动输入密码 browser.find_element_by_id("wkwj9A").send_keys(pan_pwd) time.sleep(2) # 自动回车 browser.find_element_by_id("wkwj9A").send_keys(Keys.ENTER) time.sleep(5) print(browser.current_url) # 点击保存到网盘，跳出登录框 browser.find_element_by_css_selector('.g-button.g-button-blue').click() time.sleep(5) # 输入账号密码 browser.find_element_by_id("TANGRAM__PSP_10__footerULoginBtn").click() time.sleep(3) browser.find_element_by_id("TANGRAM__PSP_10__userName").send_keys(self.username) browser.find_element_by_id("TANGRAM__PSP_10__password").send_keys(self.password) browser.find_element_by_id("TANGRAM__PSP_10__submit").click() # 若出现旋转验证码 try: slid_ing = browser.find_element_by_class_name('vcode-spin-button') if slid_ing: while True: ActionChains(browser).click_and_hold(on_element=slid_ing).perform() time.sleep(0.2) for track in [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4]: ActionChains(browser).move_by_offset(xoffset=track, yoffset=0).perform() try: ActionChains(browser).release(on_element=slid_ing).perform() except: break except NoSuchElementException as e: print(e) time.sleep(10) browser.find_element_by_css_selector('.Qxyfvg.fydGNC').click() time.sleep(2) # 再次点击保存到网盘 browser.find_element_by_css_selector('.g-button.g-button-blue').click() time.sleep(2) browser.find_element_by_xpath('//*[@id="fileTreeDialog"]/div[2]/div/ul/li/ul/li[4]/div/span').click() time.sleep(2) browser.find_element_by_css_selector('.icon.icon-newfolder').click() time.sleep(3) browser.find_element_by_css_selector('.input.shareFolderInput').clear() browser.find_element_by_css_selector('.input.shareFolderInput').send_keys(source_filename) browser.find_element_by_css_selector('.input.shareFolderInput').send_keys(Keys.ENTER) time.sleep(2) browser.find_element_by_css_selector('.treeview-node.treenode-empty.treeview-node-on').click() browser.find_element_by_xpath('//*[@id="fileTreeDialog"]/div[3]/a[2]').click() time.sleep(30) browser.close()备忘1234567891011121314import timeimport datetimet = time.time()print (t) #原始时间数据 1552267863.7501628print (int(t)) #秒级时间戳 1552267863print (int(round(t * 1000))) #毫秒级时间戳 1552267863750nowTime = lambda:int(round(t * 1000))print (nowTime()); #毫秒级时间戳，基于lambda 1552267863750print (datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')) #日期格式化2019-03-11 09:31:03参考python3爬虫（5）百度云盘暴力破解尝试OpenSSL.SSL.Error: [(‘SSL routines’, ‘tls_process_server_certificate’, ‘certificate verify failed’)]（ssl证书问题）python3+selenium常用语法汇总https://www.52pojie.cn/thread-1059883-1-1.html]]></content>
      <categories>
        <category>Python爬虫实战</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3+selenium+driver操作测试]]></title>
    <url>%2F%2Fblog%2FPython3-selenium-driver%E6%93%8D%E4%BD%9C%E6%B5%8B%E8%AF%95.html</url>
    <content type="text"><![CDATA[前言因为要用到Selenium的暴力操作某盘，便写一篇记录一下SeleniumSelenium 是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。Selenium 是一套完整的web应用程序测试系统，包含了测试的录制（selenium IDE）,编写及运行（Selenium Remote Control）和测试的并行处理（Selenium Grid）。Selenium的核心Selenium Core基于JsUnit，完全由JavaScript编写，因此可以用于任何支持JavaScript的浏览器上。Selenium可以模拟真实浏览器，自动化测试工具，支持多种浏览器，爬虫中主要用来解决JavaScript渲染问题。PhantomJSPhantomJS是一个基于webkit的javaScript API。它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行javaScript代码。任何你可以基于在webkit浏览器做的事情，它都能做到。它不仅是个隐性的浏览器，提供了诸如css选择器、支持wen标准、DOM操作、json、HTML5等，同时也提供了处理文件I/O的操作，从而使你可以向操作系统读写文件等。phantomJS的用处可谓非常广泛诸如网络监测、网页截屏、无需浏览器的wen测试、页面访问自动化等。下载地址安装安装selenium1pip install selenium安装低指定版本selenium1pip install selenium==2.48.0安装phantomJS下载后，解压到任意一个目录中，右击我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;编辑系统变量中的path，把plantomJS.exe添加到环境变量中即可安装Chromedriverchromedriver的版本一定要与Chrome的版本一致，不然就不起作用有两个下载地址：1、http://chromedriver.storage.googleapis.com/index.html2、https://npm.taobao.org/mirrors/chromedriver/首先需要查看你的Chrome版本，在浏览器中输入chrome://version/下载对应版本号的压缩包，如79.0.3945.130则对应可以下载1279.0.3945.1679.0.3945.36没有64位的就下个32位的解压压缩包，找到chromedriver.exe复制到chrome的安装目录C:\Program Files (x86)\Google\Chrome\Application（复制chromedriver.exe文件的路径并加入到电脑的环境变量中去）我目前的情况是将chromedriver.exe文件拖到Python的Scripts目录下，同时chromedriver.exe也在C:\Program Files (x86)\Google\Chrome\Application但是没有把这个路径放在环境变量，然后可以运行完成后在cmd下输入chromedriver验证是否安装成功123Starting ChromeDriver 79.0.3945.36 (3582db32b33893869b8c1339e8f4d9ed1816f143-refs/branch-heads/3945@&#123;#614&#125;) on port 9515Only local connections are allowed.Please protect ports used by ChromeDriver and related test frameworks to prevent access by malicious code.使用Selenium基本使用看这里 https://www.jianshu.com/p/3aa45532e179phantomJS使用1browser = webdriver.PhantomJS()使用时如果出现下面的报错信息12UserWarning: Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead warnings.warn('Selenium support for PhantomJS has been deprecated, please use headless '意思是selenium已经放弃PhantomJS了，建议使用火狐或者谷歌无界面浏览器解决方案，降低selenium版本1pip install selenium==2.48.0Chromedriver使用可以看看Python3+Selenium 配置Chrome选项正常模式123driver = webdriver.Chrome()driver.get('http://www.baidu.com/')print (driver.page_source)chromedriver无界面模式12345678chrome_options = webdriver.ChromeOptions()# 无头浏览器选项chrome_options.add_argument('--headless')# 谷歌文档提到需要加上这个属性来规避bugchrome_options.add_argument('--disable-gpu')browser = webdriver.Chrome(chrome_options=chrome_options)browser.get('http://www.baidu.com/')print(browser.page_source)或12345678910from selenium.webdriver.chrome.options import Optionschrome_options = Options()# 无头浏览器选项chrome_options.add_argument('--headless')# 谷歌文档提到需要加上这个属性来规避bugchrome_options.add_argument('--disable-gpu')browser = webdriver.Chrome(chrome_options=chrome_options)browser.get('http://www.baidu.com/')print(browser.page_source)栗子根据id找到对应的节点并输入密码12345url = 'xxx'pwd = 'xxx'browser = webdriver.Chrome()browser.get(url)browser.find_element_by_id("xxx").send_keys(pwd)键盘回车123from selenium.webdriver.common.keys import Keysbrowser.find_element_by_id("xxx").send_keys(Keys.ENTER)获取包含多个class名称的tag对象时，如：class=&quot;g-button g-button-blue&quot;，（中间有空格），建议使用1browser.find_element_by_css_selector(".g-button.g-button-blue")或者1browser.find_element_by_css_selector("[class='g-button g-button-blue']")模拟点击1browser.find_element_by_id("xxx").click()]]></content>
      <categories>
        <category>Selenium</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo自定义页面引用外部字体]]></title>
    <url>%2F%2Fblog%2FHexo%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E5%BC%95%E7%94%A8%E5%A4%96%E9%83%A8%E5%AD%97%E4%BD%93.html</url>
    <content type="text"><![CDATA[前言之前写过一篇Fullpage+NexT打造自己钟意的经典语录集，其中也提到了当时采用的字体是Google的一种宋体，但是感觉还是差了点而且在有字库上也看到了喜欢的字体-田氏宋体旧字形，但是这个好像还得花钱，于是想尽办法，最终找到了实现的方法！流程下载字体要想使用田氏宋体旧字形，那么首先我们得拿到这个字体，于是在这里，我把它下载下来了~下载后得到了一个ttf文件(最好使用英文重命名一下)，但是光有一个这个文件，我发现并不能改变实际展示出来的字体，于是乎找了找资料，最终把ttf字体格式转成多种字体格式，像这样123456789@font-face &#123; font-family: "tsst"; src: url("../font/tsst.woff2") format("woff2"), url("../font/tsst.woff") format("woff"), url("../font/tsst.ttf") format("truetype"), url("../font/tsst.eot") format("embedded-opentype"), url("../font/tsst.svg") format("svg"), url("../font/tsst.otf") format("opentype");&#125;格式转换那么如何转呢？简单，进入https://www.fontke.com/tool/fontface/这个网站，将ttf字体文件上传，然后点击生成，就可以拿到一个包含其它格式的压缩包了字体引用在站点文件根目录下的source文件夹下新建一个font文件夹，将上述得到的多种格式压缩包解压后的全部文件移动到font文件夹下，这是我试了好久才成功的……我选择的是直接把CSS写在文件中，如下123456789101112131415&lt;style type="text/css"&gt;@font-face &#123; font-family: "tsst"; src: url("../font/tsst.woff2") format("woff2"), url("../font/tsst.woff") format("woff"), url("../font/tsst.ttf") format("truetype"), url("../font/tsst.eot") format("embedded-opentype"), url("../font/tsst.svg") format("svg"), url("../font/tsst.otf") format("opentype");&#125;.aword &#123; font-family:'tsst';&#125;&lt;/style&gt;然后字体就改变了！！！这里可能还要注意的是文件的渲染问题了，我的配置只是在该index.md文件开头处加上了123---layout: false---但是没有在全局配置文件的skip_render处，选择不渲染该文件还有一点就是页面加载起来可能有点慢加速通过字蛛压缩字体文件将NodeJS更新至最新版本，Linux可用n命令，但是windows下不行，所以从官网重新下载后，安装然后，在博客项目文件夹下安装1npm install font-spider -g完成结果1234567$ npm install font-spider -gC:\Users\xx\AppData\Roaming\npm\font-spider -&gt; C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\bin\font-spidernpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\font-spider\node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)+ font-spider@1.3.5updated 1 package in 82.213s注意CSS中的font-face，字蛛不支持otf123456789@font-face &#123; font-family: "tsst"; src: url("../font/tsst.woff2") format("woff2"), url("../font/tsst.woff") format("woff"), url("../font/tsst.ttf") format("truetype"), url("../font/tsst.eot") format("embedded-opentype"), url("../font/tsst.svg") format("svg"); /*url("../font/tsst.otf") format("opentype");*/&#125;然后执行1$ font-spider source/a-word/index.md但是我的过程中出现了报错，如下第一个123456789101112$ font-spider source/a-word/index.mdError: does not support remote path &quot;https://cdn.staticfile.org/font-awesome/4.7.0/fonts/fontawesome-webfont.eot?&quot; at C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:32:23 at Array.forEach (&lt;anonymous&gt;) at Compress.&lt;anonymous&gt; (C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:30:23) at new Promise (&lt;anonymous&gt;) at new Compress (C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:18:12) at C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:224:16 at Array.map (&lt;anonymous&gt;) at module.exports (C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:223:37) at C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\bin\font-spider:174:16 at processTicksAndRejections (internal/process/task_queues.js:93:5)第二个123456789101112$ font-spider source/a-word/index.mdError: does not support remote path &quot;https://fonts.gstatic.com/s/notoserifsc/v6/H4chBXePl9DZ0Xe7gG9cyOj7kqGWbQ.otf&quot; at C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:32:23 at Array.forEach (&lt;anonymous&gt;) at Compress.&lt;anonymous&gt; (C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:30:23) at new Promise (&lt;anonymous&gt;) at new Compress (C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:18:12) at C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:224:16 at Array.map (&lt;anonymous&gt;) at module.exports (C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\src\compressor\index.js:223:37) at C:\Users\xx\AppData\Roaming\npm\node_modules\font-spider\bin\font-spider:174:16 at processTicksAndRejections (internal/process/task_queues.js:93:5)判断后发现与index.md文件开头的引用有关，一个是font-awesome，另外则是GoogleFont的引用，于是在注释这几条内容后重新压缩，即可成功.font-spider文件夹中保存着字体ttf备份文件参考田氏宋体旧字形字体字蛛@font-face生成器css3里面怎么引用外部字体包，不再是单调的微软雅黑和宋体hexo的yelee主题使用本地自己指定的自定义字体hexo博客next主题添加自定义字体comic neueHexo如何自定义页面模板？Hexo不渲染.md或者.htmlawesome blog type-Hexo NexT主题自定义友链页面解决引用外部字体后页面加载速度变慢前端解决中文字体加载慢的问题【ttf 压缩】html网页引用中文字体，文件过大，加载缓慢的解决办法【字蛛】【web font】html网页引用中文字体，解决加载缓慢办法]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3爬取新版喜马拉雅音频]]></title>
    <url>%2F%2Fblog%2FPython3%E7%88%AC%E5%8F%96%E6%96%B0%E7%89%88%E5%96%9C%E9%A9%AC%E6%8B%89%E9%9B%85%E9%9F%B3%E9%A2%91.html</url>
    <content type="text"><![CDATA[更新2019-10-12 19:10CSDN上有人评论说xm-sign规则改了，于是去看了看，发现实际只改了一个字母，整体流程任可以看下方正文把hashlib.md5(&quot;ximalaya-{}&quot;.format(servertime).encode()中的ximalaya替换成himalaya即可改动点如下图改动不大，可能是发现了有人在大量爬取，先小地方改动，随后可能会有较大的规则改动，教程写出来的目的是学习、测试，切勿过度爬取！前言应该也有一年了吧，之前也在简书，CSDN上写过爬取喜马拉雅音频的文章，经历了一次喜马拉雅的改版，同时也更新了一波代码最近为了喜欢的雪中悍刀行，回去重新打算跑一下代码下载音频，这一跑不要紧，结果就发现喜马拉雅又改版了得，又得重新写代码，且这次还加了JS反爬的手段，让我也好好学习了一把，嗯，下面进入正题分析初步分析老样子，首先来看看我们要爬取的目标https://www.ximalaya.com/youshengshu/2684034/像这样的882个音频，共计30页，每页一般标准的有30个，最后要将这882个音频保存到本地，那么我们最需要的是找到音频的源播放地址，我们不妨打开一个音频来看看，同时按F12打开开发者工具首先我看了看https://www.ximalaya.com/youshengshu/2684034/2725352的网页源代码中，并没有相关的播放地址，所以我开始在开发者工具中找页面刷新完之后的XHR中我没有找到明显的播放地址，然后我点了一下页面的播放按钮，之后XHR又跳出来好几条信息，随后我找到了可以看到，src对应的m4a链接就是音频的源播放地址，我们只要拿到这个链接就行了那么我们接下来就应该要访问上面这个链接，从而拿到音频的播放地址，但是当我们复制链接后去打开时会发现[SIGN] no sign or wrong sign，是的，你很大几率会看到这个，没有sign或错误的sign，那么也就是说这个链接是打不开的？那么带上请求头试试？后来我用postman访问这个链接，带上请求头后还是没有得到结果，然后想了想，返回给我们的提示是sign正好请求头中就有这个xm-sign，于是我重新试了一下，只带上这个xm-sign去访问，发现在一次尝试中拿到了之前看到的带有播放链接的response1xm-sign: dcf3736db17584cb0b7260c1fcb1f05f(45)1569231095030(64)1569231094006那么下一步要解决的就是如何获得这个xm-sign进阶分析xm-sign并不在XHR中能够找到，所以我下一步的目标是在JS文件中找找啊找，终于在上面的js文件中，找到了点头绪，出现了同样的xm-sign，这个过程对我来说是比较漫长的，因为需要在js文件中一个个的浏览过去，当然你通过fiddler抓包去找也是差不多的然后为了明确知道xm-sign是怎么来的，我们就需要对这个js文件进行打断点调试，在控制台的Source中打开该Js文件右键该JS文件，点击Open in Sources panel，或者鼠标轻放在该文件上，会出现该文件的路径，到控制台Source中找到它找到该文件后点击打开，然后点击下方的花括号按钮，美化代码，再按ctrl + f搜索xm-sign，就可以定位到xm-sign我们需要知道对应xm-sign的值t到底是怎么样的，接着在return e上打上断点，这样一来，当页面刷新运行到这里的时候会自动停止之后的JS代码，可以让我们来进行调试，如何通过Chrome调试可以参考这篇文章打好断点后，刷新页面，等待一会，不用动别的，然后就可以看到下图图中所示的xm-sign的值就是t的值，再往上一点，t的值就是由o.default产生的1234567891011121314151617181920n.interceptors.request.use(function(e) &#123; if (e.url.indexOf("/revision") &gt; -1) &#123; var t = (0, o.default)(); // 然后点击 o.default 进入该方法中 e.headers = function(e) &#123; for (var t = 1; t &lt; arguments.length; t++) &#123; var r = null != arguments[t] ? arguments[t] : &#123;&#125;; t % 2 ? i(r, !0).forEach(function(t) &#123; u(e, t, r[t]) &#125;) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : i(r).forEach(function(t) &#123; Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t)) &#125;) &#125; return e &#125;(&#123;&#125;, e.headers, &#123; "xm-sign": t &#125;) &#125; return e &#125;);接着我们点击o.default这个方法，进去看看这一串值到底如何生成，鼠标放在o.default上，点击出现的anonymous方法我们就自动跳转到了下一个JS文件，同样格式化后我们就看到了下图所示的function部分12345678function() &#123; return function(t) &#123; var e = Date.now(); // 当前时间戳 return ("&#123;ximalaya-" + t + "&#125;(" + Le(100) + ")" + t + "(" + Le(100) + ")" + e).replace(/&#123;([\w-]+)&#125;/, function(t, e) &#123; return Ue(e) &#125;) &#125;(Ne() ? Date.now() : window.XM_SERVER_CLOCK || 0)&#125;这个方法最终返回的就是我们的xm-sign的值，而return部分就是1("&#123;ximalaya-" + t + "&#125;(" + Le(100) + ")" + t + "(" + Le(100) + ")" + e).replace(/&#123;([\w-]+)&#125;/, function(t, e) &#123;return Ue(e)&#125;取消之前的断点，我们可以在下图中再打断点，再刷新页面，等待，调试可以看到这里面t就是时间戳，这个我们可以在前面的找到对应的服务器时间戳，请求这个即可https://www.ximalaya.com/revision/timeLe(100)是上面的一个函数，能生产100以内的随机数，如下，e就是当前的时间戳1234function Le(t) &#123; return ~~(Math.random() * t) // ~~ 代表双非按位取反运算符，对于正数，它向下取整；对于负数，向上取整；非数字取值为0&#125;replace(/{([\w-]+)}/, function(t, e) {return Ue(e)}，replace就是把{ximalaya-&quot; + t + &quot;}部分替换成Ue(e)的值我们接着看Ue()，同样鼠标放在Ue上，点击出现的anonymous(t, n)方法1234567t.exports = function(t, n) &#123; if (null == t) throw new Error("Illegal argument " + t); var r = e.wordsToBytes(i(t, n)); // 以下就是返回的值 return n &amp;&amp; n.asBytes ? r : n &amp;&amp; n.asString ? o.bytesToString(r) : e.bytesToHex(r) &#125;我们在这里也可以打个断点看看返回的是什么，并且右键编辑断点时要打印的数据，我在这里就设置在控制台打印当前返回的内容然后这个箭头就会变橙色，我们取消其他的断点，再次刷新页面，等待一会，调试可以看到t = &quot;ximalaya-1569237828683&quot;, n = undefined，并且控制台打印有15de4b221c3cb112d4d8200ccf094a8e这样的一串字符根据经验猜测这可能是md5码，于是我们尝试使用在线转换工具，将ximalaya-1569237828683转换为MD5编码格式的内容，结果如下结果正确，现在我们可以得出结论，参数xm-sign的值其实就是MD5(ximalaya-服务器时间戳) + (100以内的随机数) + 服务器时间戳 + (100以内的随机数) + 现在的时间戳代码解决了上面的JS反爬问题，我们来看看实际代码，这是主要的爬取起始部分123456789101112131415161718192021222324252627282930313233# 传入专辑的ID，xm_fm_iddef get_fm(self, xm_fm_id): # 根据有声书ID构造url fm_url = self.base_url + '/youshengshu/&#123;&#125;'.format(xm_fm_id) print(fm_url) r_fm_url = self.s.get(fm_url, headers=self.header) # 获取书名 fm_title = re.findall('&lt;h1 class="title _leU"&gt;(.*?)&lt;/h1&gt;', r_fm_url.text, re.S)[0] print('书名：' + fm_title) # 新建有声书ID的文件夹 fm_path = self.make_dir(xm_fm_id) # 取最大页数 max_page = re.findall(r'&lt;input type="number" placeholder="请输入页码" step="1" min="1" ' r'max="(\d+)" class="control-input _bfuk" value=""/&gt;', r_fm_url.text, re.S) if max_page and max_page[0]: for page in range(1, int(max_page[0]) + 1): print('第' + str(page) + '页') # 获取当前时间对应的 xm-sign 添加到请求头中 self.get_sign() # 访问链接 r = self.s.get(self.base_api.format(xm_fm_id, page), headers=self.header) # print(json.loads(r.text)) r_json = json.loads(r.text) for audio in r_json['data']['tracksAudioPlay']: # 获取json中的每个音频的标题以及播放源地址 audio_title = str(audio['trackName']).replace(' ', '') audio_src = audio['src'] # 交给下载的方法 self.get_detail(audio_title, audio_src, fm_path) # 每爬取1页，30个音频，休眠3秒 time.sleep(3) else: print(os.error)这是构造xm-sign的方法，用到了Python的hashlib包1234567891011121314151617181920212223242526272829303132def __init__(self): self.base_url = 'https://www.ximalaya.com' self.base_api = 'https://www.ximalaya.com/revision/play/album?albumId=&#123;&#125;&amp;pageNum=&#123;&#125;&amp;sort=0&amp;pageSize=30' self.time_api = 'https://www.ximalaya.com/revision/time' self.header = &#123; 'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0' &#125; self.s = requests.session()def get_time(self): """ 获取服务器时间戳 :return: """ r = self.s.get(self.time_api, headers=self.header) return r.textdef get_sign(self): """ 获取sign： md5(ximalaya-服务器时间戳)(100以内随机数)服务器时间戳(100以内随机数)现在时间戳 :return: xm_sign """ nowtime = str(round(time.time() * 1000)) # 得到服务器时间戳 servertime = self.get_time() # 构造 xm-sign sign = str(hashlib.md5("ximalaya-&#123;&#125;".format(servertime).encode()).hexdigest()) + "(&#123;&#125;)".format( str(round(random.random() * 100))) + servertime + "(&#123;&#125;)".format(str(round(random.random() * 100))) + nowtime # 添加到请求头 self.header["xm-sign"] = sign # print(sign) # return sign这是保存音频的部分123456789101112def get_detail(self, title, src, path): # 请求源地址的链接，得到response r_audio_src = self.s.get(src, headers=self.header) # 构造保存路径 m4a_path = path + title + '.m4a' if not os.path.exists(m4a_path): with open(m4a_path, 'wb') as f: # 写入 f.write(r_audio_src.content) print(title + '保存完毕...') else: print(title + 'm4a已存在')成果后续当然这只是喜马拉雅非付费的音频专辑，如果是付费后的专辑则需要另一套更加复杂的JS破解方法，我搞了半天，先拿手机抓包试了试，到最后发现还是得破解如何构造最后的下载地址网上也有那种软件，这个就不多说了需要代码的可以去我的GitHub，传送门参考python模拟喜马拉雅js，全过程突破xm-sign，轻松爬取音频数据python爬取喜马拉雅音频，突破xm-sign校验反爬（爬虫）爬虫之突破xm-sign校验反爬喜马拉雅音频下载工具Chrome 开发者工具代码行断点调试js中~~和 | 的妙用]]></content>
      <categories>
        <category>Python爬虫实战</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速搭建免费视频网站记录]]></title>
    <url>%2F%2Fblog%2F%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95.html</url>
    <content type="text"><![CDATA[记录主要是根据10分钟搭建属于自己的视频网站 海洋cms视频网站搭建超详细教程 零基础的看过来这一篇教程来做的，花了一天的功夫，从零到能在线播放视频，啧啧啧~工具这次记录过程中主要用到的工具有：海洋cms，悍铭数据中心服务器，Xshell或者是WinSCP，在下面的过程中配合步骤讲解服务器腾讯云、阿里云、网上也有免费空间等等都可以，这里用的是免备案的，能省下很多麻烦悍铭福利空间，我是基于这个做的，花了12元购买的一年的，注册完充值购买即可使用这个虚拟主机最近不稳定，不建议大家购买，虽然便宜，但是一般，适合练手，如果你有一点点的基础，建议买阿里百度腾讯等等的服务器买域名并解析到服务器在阿里腾讯百度云上购买域名，用来解析到服务器，这一步需要的话就上对应的服务器商找参考教程，如果购买了悍铭的服务器不买域名也行，它自带的分配了一个，凑活用上传程序首先下载海洋CMS到你的电脑上，海洋cms是一套可以快速建站的cms工具，类似的还有苹果cms等，下载地址下载之后将压缩包放到任意文件夹下解压打开解压后的文件夹选中upload文件夹里面的所有文件和文件夹压缩为rar文件重命名为”1.rar”电脑安装FTP软件（WinSCP）自行百度下载并安装WinSCP，或者使用Xshell打开刚安装的WinSCP，看下图，在虚拟主机服务商那里找到相应信息将相应信息填写到软件里，点击登陆，注意使用的是FTP协议将“1.rar”上传到/db文件夹中去/web文件夹里，把里面的文件全部清空，下面在浏览器里打开虚拟主机管理界面点击在线解压等待几分钟，等待解压完成，解压完空间里是这个样子的如果是下图这样，请面壁思过注意：有可能过了十几分钟在WinSCP还是没有看到解压的文件，那么只好手动将upload文件夹下的全部的文件上传到/web下在这里找到相应的信息打开浏览器，访问下面的网址，http://你的域名/install/index.php如下图所示看上图，查看对应关系，填写相应信息，用户名、密码、网站名称、网站网址、安装目录按需填写，若看不懂就不用管，保持默认，点击下一步，下一步，下一步成功后，下面打开FTP软件（WinSCP），把红色框内的文件夹名字改为 qwe（或者别的字母），注意最新版本的海洋CMS会自动改名，也就是说你的admin文件会自动改为成功时出现的后台地址中的文件名部分1234首页地址：http://你的域名后台地址：http://你的域名/&#123;文件名&#125;用户名：xxx密 码：xxx打开你的后台网址，输入用户名密码，下面看图操作按照下图配置播放器设置，删除缓冲广告页，广告时间改为0，解析接口配置中全部清空，其余不变至此网站搭建完毕，下一步就是资源的采集资源采集百度一下 “资源采集”，这些网站都是免费资源采集站我们以永久资源网http://yongjiuzy.vip/help/#SeaCms为例打开上面网址，看图操作，看下面两张图就足够了一般一个资源采集站有两个播放器，具体的也可以参考这里打开资源采集站，点击箭头所指部分下载一个压缩包到桌面上，解压出两个.html文件，一般一个资源采集站有两个播放器打开FTP软件（WinSCP），将解压出的两个.html文件上传到/web/js/player目录下面看图操作分类绑定，点击未绑定字样，在弹出的菜单中下拉选择对应的分类，没有就空着，别乱绑，下面开始一键采集，采集过后点击更新缓存完成后就可以在网站上点击播放视频啦其他问题自定义分类绑定项网站后台-数据-分类管理-添加一个你想要的分类，绑定时就会有对应的分类了手机播放有广告清空红框内数据，广告时间改为0无权限观看相关视频解决办法1：网站后台-用户组管理-匿名用户（普通会员）-编辑-勾选无权限查看的分类-保存解决办法2：网站后台-系统-网站设置-会员系统开关-关闭会员功能首页没有幻灯片网站后台 - 数据 - 数据管理 - 编辑将影片设置五星推荐 上首页幻灯片将影片设置四星推荐 上频道幻灯片网上搜索影片海报图片，复制图片的地址，填写到数据里，看下图，然后点击保存只有一条播放线路解决办法：添加多个资源库批量删除数据自己购买的域名解析并绑定后无法打开可能是你设置的解析方式不对，仔细看下图中的红字具体解决方法看下图，注意两图不同之处网站打开后如下图所示原因：解压之前没有清空/web文件夹里的文件解决办法1：去/web文件夹里，把里面的文件全部清空，重新安装解决办法2：看图操作将index.php移动到前面资源永久资源网酷云资源参考10分钟搭建属于自己的视频网站 海洋cms视频网站搭建超详细教程 零基础的看过来如何搭建一个自己的视频网站？对接公众号自动回复！悍铭福利空间建立你的私人在线影库：Plex云盘搭建及使用教程用VPS搭建离线下载播放器【aria2+h5ai】苹果CMS快速搭建在线视频网站的采集设置如何搭建一个视频采集网站宝塔面板搭建苹果CMS影视网站新手小白如何用8小时搭建一个影视网站！苹果cmsv10安装详情，搭建自己的视频网站搭建在线视频网站，怎么弄]]></content>
      <categories>
        <category>Make Something</category>
      </categories>
      <tags>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客添加音乐播放器]]></title>
    <url>%2F%2Fblog%2FHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8.html</url>
    <content type="text"><![CDATA[前言之前添加的就是网易云的播放外链，但是只有一首歌，后来就找了找能不能添加更多的歌曲，就发现了可以添加网易云歌单，还有使用APlayer网易云单曲外链首先进入网页版网易云，点击播放一首歌，进入https://music.163.com/#/song?id=208902的页面，可以在页面中看到如下图所示点击后，进入如下页面然后可以选择尺寸大小，及是否自动播放等，最后复制下方的HTML代码，然后在themes\next\layout\_macro\sidebar.swig中添加即可themes\next\layout\_macro\sidebar.swig12345 &lt;div class="sidebar-inner"&gt; ...+ &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=332 height=86 src="//music.163.com/outchain/player?type=2&amp;id=22842399&amp;auto=1&amp;height=66"&gt;&lt;/iframe&gt; &lt;/div&gt;在侧栏导航栏中就会出现该歌曲，但要注意的是有的歌曲因版权限制是无法生成外链的，就算拼成了外链的连接也无法播放网易云歌单外链进入你的歌单页面，如https://music.163.com/#/playlist?id=歌单ID点击生成外链播放器，注意如果歌单中包含因版权问题无法播放(即成阴影色的歌曲)，那么该歌单无法生成外链选择尺寸等选项后复制HTML代码，添加到上述位置即可APlayer播放器官方文档，Github地址可以通过npm下载，再把下载好的dist文件夹(hexo项目\node_modules\aplayer\dist)复制到\themes\next\source中1npm install aplayer --save在themes\next\layout\_layout.swig的&lt;body&gt;&lt;/body&gt;标签中的任意位置添加下面代码themes\next\layout\_layout.swig123456&lt;!-- APlayer播放器 --&gt;&lt;link rel="stylesheet" href="/dist/APlayer.min.css"&gt;&lt;div id="aplayer"&gt;&lt;/div&gt;&lt;script type="text/javascript" src="/dist/APlayer.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="/dist/aplayermusic.js"&gt;&lt;/script&gt;&lt;!-- APlayer播放器 --&gt;其中id为aplayer就是你要在浏览器放置的地方，样式z-index则是为了让播放器显示载最上面一层然后再themes\next\source\dist\建立一个js文件，名字任意，我建的是aplayermusic.js，在其中写下如下代码注意container对应id为aplayer，别改了上面忘了下面themes\next\source\dist\aplayermusic.js1234567891011121314151617181920212223242526const ap = new APlayer(&#123; container: document.getElementById('aplayer'), // mini: false, fixed: true,//吸底模式 autoplay: false,//默认是否自动播放 theme: '#FADFA3', loop: 'all', order: 'random', preload: 'auto', volume: 0.7,//默认音量 mutex: true,//是否不允许多个播放器同时播放 listFolded: true,//是否默认收起播放列表 listMaxHeight: 90,//播放列表的高度 //lrcType: 3, //使用lrc文件提供歌词 //网易云默认外链链接：http://music.163.com/song/media/outer/url?id=ID数字.mp3 audio: [ &#123; name: 'SURPRISE-DRIVE', artist: '松冈充', url: 'http://music.163.com/song/media/outer/url?id=29751409.mp3', cover: 'http://p1.music.126.net/Oo0kXusaoF9DGwjAJFeAtA==/6671836558494023.jpg', lrc: '/./dist/music/lrc/29751409.lrc', theme: '#46718b' &#125; ]&#125;);其中audio标签下，就是加进去的歌曲，由于把lrcType: 3注释了，所以lrc歌词文件不会生效详细参数的配置可以参考官方文档123456name: 'SURPRISE-DRIVE',artist: '松冈充',url: 'http://music.163.com/song/media/outer/url?id=29751409.mp3',cover: 'http://p1.music.126.net/Oo0kXusaoF9DGwjAJFeAtA==/6671836558494023.jpg',lrc: '/./dist/music/lrc/29751409.lrc',theme: '#46718b'name歌名artist作曲家，这两个云音乐上就有url网易云默认外链链接：http://music.163.com/song/media/outer/url?id=ID数字.mp3cover封面图http://p1.music.126.net/Oo0kXusaoF9DGwjAJFeAtA==/6671836558494023.jpg在歌曲页面右键点击检查，或按F12调出开发者工具，点击下图中最左侧按钮然后点击封面图片图中http开头的链接即是cover链接lrc歌词文件 /./dist/music/lrc/29751409.lrc下载green-version.zip文件，在本地解压后运行，输入网易云歌曲ID即可下载歌词，详细操作参考项目README文件theme是更高优先级的主题色参考Hexo+Next添加网易云音乐为hexo博客yilia模版添加aplayer音乐播放器hexo上的aplayer应用hexo-Next主题美化&lt;二&gt;ZonyLrcToolsX音乐直链搜索杨天音乐外链https://gist.github.com/3rogue/5b03fbe499b2bfff91d1ef15a2583d55163MusicLyrics网易云音乐直接下载APlayer文档]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单明了的hexo博客备份操作]]></title>
    <url>%2F%2Fblog%2F%E7%AE%80%E5%8D%95%E6%98%8E%E4%BA%86%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[这算是我见过相当简单并实际操作后成功备份的操作指南前提博客搭建完成，并且已发布过文章远程项目地址为https://github.com/joelYing/joelYing.github.io.git(这是我的仓库)，默认分支为master原博客所在项目文件夹为hexo，命令均在git bash下执行备份在项目新建分支source分支（名称随意），在下图中新建即可设置source为默认分支后，点击update更新默认分支在任意处新建文件夹hexo-source，通过gitbash在文件夹下执行git clone https://github.com/joelYing/joelYing.github.io.git进入hexo-source下的项目目录joelYing.github.io，这时gitbash分支名应显示source1git rm * -r清空文件夹打开原项目hexo文件夹下的.gitignore，复制原项目hexo文件夹下除.gitignore中显示以外的所有文件到joelYing.github.io.gitignore文件中记录的是git提交时需要忽略的文件删除现在joelYing.github.io下themes/主题文件夹下的.git文件，否则主题文件无法push，如果下载的是主题zip解压后的文件夹可忽略此步123git add .git commit -m "xxx"git push origin source三步提交所有代码到远程仓库即可博客从一开始就在本地生成，选择复制是为了方便使用远程地址另外Sublime 同时打开多个文件夹（项目）打开第二个project--&gt;add folder to project参考hexo博客备份]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fullpage+NexT打造自己钟意的经典语录集]]></title>
    <url>%2F%2Fblog%2FFullpage-NexT%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E9%92%9F%E6%84%8F%E7%9A%84%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95%E9%9B%86.html</url>
    <content type="text"><![CDATA[想法不知道你有没有那种第一眼见到就喜欢的不得了的句子，经典名言，风流诗句，或者是小说中那些霸气无比的对白……我是喜欢得有很多，而且老是想着把这些话记录在一个本子上，想着以后偶尔翻翻还会觉得，嗯，挺有滋味由于刚开始制做自己的博客，期间参考了很多位大佬的作品，发现有一位大哥做的其中一个页面令我感觉棒极了，就是那种每往下滑一页，就是一句很有意思的语句，加上滑动时那种丝滑般的感受，我就也想做一个这样的页面出来，奈何对于前端不是非常了解，好在做过些许爬虫，于是看了看大哥的页面好像用到了一个叫做fullpage的东西于是就开始了自己的倒腾之路……附上成果地址https://joelying.github.io/a-word/实现第一步想在NexT博客中也展示这样一个自己独立的页面，就需要新建一个页面啦1hexo new page a-word然后在菜单中添加链接，编辑主题配置文件，添加a-word到menu中，图标参考了Font Awesome中的样式，如下:hexo\themes\next\_config.yml12345678menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive schedule: /schedule/ || calendar+ a-word: /a-word/ || align-center然后找到hexo\themes\next\languages\zh-CN.yml，在menu下添加页面对应的中文名称hexo\themes\next\languages\zh-CN.yml1234567891011menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益 404+ a-word: 一言这样一来一个新的页面就出现在首页的菜单栏中了，但是点进去却发现里面的样式已经有了，是被NexT渲染过的，有了固定的模样，那么怎么自己来定义一个页面呢？于是参考这篇文章所说，在配置文件中忽略渲染这个页面即可在站点配置文件_config.yml中的skip_render项1skip_render: diyPage/**这样的话是忽略diyPage文件夹下的所有文件1skip_render: page/diyfile.html这样的话应该是只忽略diyfile.html这一个文件,于是将hexo\source\a-word\index.md新建页面的md文件添加在后面，如下：hexo\_config.yml1skip_render: /source/a-word/index.md但是最终我的页面还是新建完成之后的样子，后来再看到这篇文章中的方法二，在md文件的font-matter处添加了123---layout: false---这下重新部署之后发现页面就是一个干净空白的页面了！第二步有了自定义的页面，接下来我就去找这个fullpage到底是什么样的，Google一番后，在这里看到了我想要的效果演示，也找到了这个fullpage的GitHub地址这是它的中文Readme，依据上面所说实现一个fullpage页面应该是极其easy的……但是我不一样，我只是个小白……他说的可以用npm安装，我都不知道该放在哪个文件夹下比较好，对不对，代码应该具体些在哪里才有用……于是乎我开一启了一轮又一轮的尝试……最终啊，在网上找倒一个小实例，参考如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang="en"&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no"/&gt; &lt;title&gt;Fullpage简单例子&lt;/title&gt; &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/2.9.4/jquery.fullpage.css"/&gt; &lt;style type="text/css"&gt; body&#123; color:#fff;/*文字为白色*/ &#125; .section1&#123; background-color: green; &#125; .section2&#123; background-color: orange; &#125; .section3&#123; background-color: gray; &#125; .section4&#123; background-color: red; &#125; .slide&#123; text-align: center; font-size: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;//开始制作&lt;div id="fullpage"&gt; &lt;div class="section section1"&gt;&lt;h1&gt;这是第一屏&lt;/h1&gt;&lt;/div&gt; &lt;div class="section section2"&gt; &lt;div class="slide"&gt;slide1&lt;/div&gt; &lt;div class="slide"&gt;slide2&lt;/div&gt; &lt;div class="slide"&gt;slide3&lt;/div&gt; &lt;div class="slide"&gt;slide4&lt;/div&gt; &lt;div class="slide"&gt;slide5&lt;/div&gt; &lt;div class="slide"&gt;slide6&lt;/div&gt; &lt;/div&gt; &lt;div class="section section3"&gt;&lt;h1&gt;这是第三屏&lt;/h1&gt;&lt;/div&gt; &lt;div class="section section4"&gt;&lt;h1&gt;这是第四屏&lt;/h1&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.0/jquery.js"&gt;&lt;/script&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/2.9.4/jquery.fullpage.js"&gt;&lt;/script&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/2.9.4/jquery.fullpage.js"&gt;&lt;/script&gt;&lt;!--激活fullpage效果--&gt;&lt;script&gt; $(document).ready(function()&#123; $('#fullpage').fullpage(); &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;于是终于能够摸着活生生的fullpage页面了！！！，后来在原来的基础上删删改改，一个初步的页面就做好了，实现fullpage相关的js，css文件我都是通过cdn加载的，可以在这里找1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;XXX&lt;/title&gt;&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.0.7/fullpage.css"/&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.js"&gt;&lt;/script&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.0.7/fullpage.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="fullpage"&gt; &lt;div class="section active"&gt; 人海似海却无岸 &lt;/div&gt; &lt;div class="section"&gt; 哈哈哈 &lt;/div&gt; &lt;div class="section"&gt; &lt;div class="slide"&gt; 一 &lt;/div&gt; &lt;div class="slide"&gt; 二 &lt;/div&gt; &lt;div class="slide"&gt; 三 &lt;/div&gt; &lt;/div&gt; &lt;div class="section"&gt; 《雪中悍刀行》 &lt;/div&gt;&lt;/div&gt;&lt;!--激活fullpage效果--&gt;&lt;script&gt;$(document).ready(function()&#123; $('#fullpage').fullpage();&#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;第三步实现了一个初步的页面后，后面的工序就明显了，我想把文字展示在页面居中位置，就要通过CSS控制文本位置；还有就是用到不同的字体了，一句话的字体与这句话出自哪里的字体要不同在找了找大哥的页面源码的时候，发现大哥用的是“有字库”的在线云字体，一开始用的时候，哇，怎么有这么方便字体引用，只需要加几段代码到&lt;head&gt;中间就行了呢！结果我用完，第二天一条短信发了过来：尊敬的****用户您好，您的有字库套餐于现在时间xxxx年xx月xx日剩余库币数为0，请您尽快登录有字库官方网站充值！我心想，这不会吧，就访问页面这么几次就用不了了吗？结果打开网页一看，得，字体用不了了，唉气得我emmmm…试过用CSS添加外部字体，但是老是没生效，最后想了想，看到了这篇文章后找上了GoogleFont，翻墙后，用仅有的几个中文字体……1234&lt;!-- Google font --&gt;&lt;link href="https://fonts.googleapis.com/css?family=Noto+Serif+SC&amp;display=swap" rel="stylesheet"&gt;&lt;link href="https://fonts.googleapis.com/css?family=ZCOOL+XiaoWei&amp;display=swap" rel="stylesheet"&gt;&lt;link href="https://fonts.googleapis.com/css?family=Zhi+Mang+Xing&amp;display=swap" rel="stylesheet"&gt;要使用对应的字体只要再添加对应的font-family于想要标签的CSS样式中即可第四步为了这个页面的第一个section看起来不那么枯燥，于是从阿里巴巴矢量库找到了一个矢量图标，给它加了一个不断旋转的效果最终代码在这：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182---title: XXXdate: 2019-08-24 16:06:15layout: false---&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;你的标题&lt;/title&gt;&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.0.7/fullpage.css"/&gt;&lt;link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css"&gt;&lt;!-- Google font --&gt;&lt;link href="https://fonts.googleapis.com/css?family=Noto+Serif+SC&amp;display=swap" rel="stylesheet"&gt;&lt;link href="https://fonts.googleapis.com/css?family=ZCOOL+XiaoWei&amp;display=swap" rel="stylesheet"&gt;&lt;link href="https://fonts.googleapis.com/css?family=Zhi+Mang+Xing&amp;display=swap" rel="stylesheet"&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.js"&gt;&lt;/script&gt;&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.0.7/fullpage.js"&gt;&lt;/script&gt;&lt;style type="text/css"&gt;.text &#123; text-align: left; display: inline-block;&#125;.aword &#123; font-family: 'Noto Serif SC', serif; line-height: 2; text-align: center;&#125;.aword-active &#123; font-family: 'Zhi Mang Xing', cursive; line-height: 2; text-align: center;&#125;.aword-by,.aword-active-by &#123; font-family: 'Noto Serif SC', serif; margin-left: 1000px; line-height: 3; color: #555;&#125;.aword-p1 &#123; text-align: center; width: 500px; margin: 0 auto; margin-top: 250;&#125;&lt;/style&gt;&lt;!-- 控制图片旋转 --&gt;&lt;script&gt; var rotateVal = 0 // 旋转角度 var InterVal // 定时器 window.onload = function () &#123; // 网页加载完成后即运行rotate函数 rotate() // 鼠标悬浮在图片上时，停止旋转，即清除定时器 document.getElementById('img').onmousemove = function () &#123; clearInterval(InterVal) &#125; // 鼠标离开图片时，继续旋转，即继续运行定时器 document.getElementById('img').onmouseleave = function () &#123; rotate() &#125; &#125; // 设置定时器 function rotate () &#123; InterVal = setInterval(function () &#123; var img = document.getElementById('img') rotateVal += 1 // 设置旋转属性(顺时针) img.style.transform = 'rotate(' + rotateVal + 'deg)' // 设置旋转属性(逆时针) //img.style.transform = 'rotate(-' + rotateVal + 'deg)' // 设置旋转时的动画 匀速0.1s img.style.transition = 'linear' &#125;, 5) // 数值越小速度越快 &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="fullpage"&gt; &lt;div class="section active"&gt; &lt;div class="aword-active" style="font-size: 70px"&gt; 人海似海却无岸 &lt;/div&gt; &lt;div class="aword-active-by" style="font-size: 18px; text-align: center;"&gt; 往下翻点击左右两边可以看到更多哦 &lt;/div&gt; &lt;div class="aword-p1"&gt; &lt;img id="img" src="图片"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="section"&gt; &lt;div class="slide"&gt; &lt;div class="aword" style="font-size: 35px"&gt; &lt;p class="text"&gt; 小二 上酒 &lt;/p&gt; &lt;/div&gt; &lt;br&gt; &lt;div class="aword-by" style="font-size: 18px"&gt; ——《雪中悍刀行》 &lt;/div&gt; &lt;/div&gt; &lt;div class="slide"&gt; &lt;div class="aword" style="font-size: 35px"&gt; &lt;p class="text"&gt; 五十年鸿业，说与山鬼听 &lt;/p&gt; &lt;/div&gt; &lt;br&gt; &lt;div class="aword-by" style="font-size: 18px"&gt; ——《雪中悍刀行》 &lt;/div&gt; &lt;/div&gt; &lt;div class="slide"&gt; &lt;div class="aword" style="font-size: 35px"&gt; &lt;p class="text"&gt; 人生当苦无妨，良人当归即好 &lt;/p&gt; &lt;/div&gt; &lt;br&gt; &lt;div class="aword-by" style="font-size: 18px"&gt; ——《雪中悍刀行》 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="section"&gt; &lt;div class="slide"&gt; &lt;div class="aword" style="font-size: 30px"&gt; &lt;p class="text"&gt; 天地无用，不入我眼。日月无用，不可同在。昆仑无用，不来就我&lt;br&gt; 恻隐无用，道貌岸然。清净无用，两袖空空。大江无用，东去不返&lt;br&gt; 风雪无用，不能饱暖。青草无用，一岁一枯。因果无用，皆是定数&lt;br&gt; 江湖无用，两两相忘……&lt;br&gt; 参禅无用，成甚么佛？！ &lt;/p&gt; &lt;/div&gt; &lt;br&gt; &lt;div class="aword-by" style="font-size: 18px"&gt; ——《雪中悍刀行》 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="section"&gt; &lt;div class="slide"&gt; &lt;div class="aword" style="font-size: 35px"&gt; &lt;p class="text"&gt; 我见过沧海的云，巫峡的雨&lt;br&gt;我见过一月的雪覆于白山，又渐变于葱茏&lt;br&gt;我在峨眉的林里云兴霞蔚，一径之后，雾水成露，沾于衣襟&lt;br&gt;我听过柔橹漂浮，声声入水，又归于沉寂&lt;br&gt;我看到春风，八里十里，衣袖带花&lt;br&gt;无论何时忆起，它们实在是人生可喜，但都不如我此刻遇到的你 &lt;/p&gt; &lt;/div&gt; &lt;br&gt; &lt;div class="aword-by" style="font-size: 18px"&gt; —— 无名 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;!--激活fullpage效果--&gt;&lt;script&gt;$(document).ready(function()&#123; $('#fullpage').fullpage();&#125;);$(document).on('click', '.aword-p1', function()&#123; fullpage_api.moveSectionDown();&#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;看完之后有没有发现我其实是在吐槽有字库，对我就是在吐槽有字库……参考SentenceHexo如何自定义页面模板？Hexo自定义页面的方法主题配置FullPage.js自学笔记（一）fullPage.jsfullpage.js结合animate.css实现滚屏动画，详细讲解，附下载地址自定义字体html-加载css样式的4种方法jQuery全屏滚动插件fullPage.jsGithub-alvarotrigo/fullPage.jsjQuery全屏滚动插件fullPage.js演示HTML/CSS/JS 在线工具过渡动画（transition）css + js实现图片不停旋转 鼠标悬停停止旋转css 单行文本居中显示，多行文本左对齐css html 如何将图片img标签 水平居中 垂直居中 和水平垂直居中有字库-在线字体]]></content>
      <categories>
        <category>Chocolate</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>Fullpage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Awesome Url]]></title>
    <url>%2F%2Fblog%2FAwesome-Url.html</url>
    <content type="text"><![CDATA[直接访问不了的网站，maybe……需要翻墙哦翻墙镜像https://github.com/googlehosts/hosts近期学习篇NexT主题个性定制与深度优化-点击特效 √Hexo 搭建个人博客系列：主题美化篇Hexo 搭建个人博客系列：进阶设置篇-点击特效等theme-next!Hexo网站的一次华丽升级Hexo NexT 主题6.x版本的使用配置与美化hexo next主题优化，打造个人精致网站基于Hexo搭建个人博客——进阶篇(从入门到入土)打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化hexo的next主题个性化教程:打造炫酷网站hexo博客框架环境搭建，并使用next主题打造精美的个人博客网站Hexo+NexT 打造一个炫酷博客个人主页与 Hexo NexT 博客搭建记录hexo博客nexT主题美化环境搭建篇GitHub+Hexo 搭建个人网站详细教程-知乎七牛云使用 Hexo 搭建 GitHub Page 博客(二)–使用 GitHub 分支保存 Hexo 环境和博文Halo-一款现代化的个人独立博客系统如何用Github的gh-pages分支展示自己的项目黑猴子的家：GitHub 之 gh-pages 新手入门使用Github的gh-pages分支展示一个页面使用七牛云图床并实现快速贴图七牛云图床和Markdown使用TypechoZ-BlogWordPress个性博客篇https://theme-next.org/学而时习之的博客https://io-oi.mehttps://blog.dlzhang.com-好人https://leaferx.online/chloneda的博客http://xyua.tophttps://moweide.com/eyhn的博客https://yangbingdong.comcduyzh的博客zhuimeng的博客shuyelife的博客https://www.qcmoke.site/http://yearito.cn/http://eternalzttz.com/http://shenzekun.cn/https://11.tt/博客-旋转立方体https://imjad.cn/主题优化篇NexT官方主题配置打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化Github+Hexo一站式部署个人博客Hexo+NexT 打造一个炫酷博客–博客杂言非语Hexo博客NexT主题美化之新增看板娘(能说话、能换装)live2d-plugin-2.0 博客已迁移基于Hexo搭建个人博客——进阶篇(从入门到入土)hexo-helper-live2d中文文档L2Dwidget用户手册2017年最新基于hexo搭建个人免费博客——自定义页面样式一NexT主题个性定制与深度优化-爆炸特效Hexo：NexT主题优化之路这应该是最全的hexo博客搭建以及next美化教程畅玩Hexo(2)：NexT主题Hexo + GitHub (Coding) Pages 搭建博客“为next主题的主页文章添加阴影效果”【搜索优化】Hexo-next百度和谷歌搜索优化hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗？Hexo博客-NexT主题：使用leancloud进行页面访客统计Hexo+Next主题优化-知乎【转】Blog摘要配图利用 Hexo + Github Pages 搭建博客并优化 Next 主题教程大哥的NexT最新7.3版个性化样式源码hexo小技巧-首页显示文章摘要及图片进度条样式hexo博客Next主题进阶写作技巧友链血小板夜间模式1夜间模式2夜间模式3问题解决篇NexT7.3最新自定义样式文件示例NexT主题升级https://github.com/theme-next/hexo-theme-next/releaseshttps://github.com/theme-next/hexo-theme-next/pull/868https://theme-next.org/https://github.com/theme-next/hexo-theme-next/issues/982https://github.com/theme-next/hexo-theme-next/issues/1021帖子在线编辑教你顺滑升级6.x版本的NexT主题给你的hexo文章列表加上一个固定高度的封面Hexo Next主题使用汇总（不定期更新）Markdown进阶语法整理优质美图篇unsplash]]></content>
      <categories>
        <category>Url</category>
      </categories>
      <tags>
        <tag>Url</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown写作样式]]></title>
    <url>%2F%2Fblog%2FMarkdown%E5%86%99%E4%BD%9C%E6%A0%B7%E5%BC%8F.html</url>
    <content type="text"><![CDATA[模板hexo\scaffolds\post.md12345678910111213---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;permalink:categories:tags: []description:image:---&lt;img class=&quot;joel-img&quot; src=&quot;&quot;&gt;&lt;!-- more --&gt;注脚代码:1这是注脚[\^1] # 实际添加注脚的时候，不用加\，\在这里是为了转义效果(注意文章末尾注脚)：这是注脚[1]文字背景色块代码:1&lt;span id="inline-blue"&gt;站点配置文件&lt;/span&gt;，&lt;span id="inline-purple"&gt;主题配置文件&lt;/span&gt;效果：站点配置文件， 主题配置文件引用边框变色代码:12&lt;p id="div-border-left-red"&gt;左侧引用边红色&lt;/p&gt;&lt;p id="div-border-top-blue"&gt;顶部引用边蓝色&lt;/p&gt;效果：左侧引用边红色顶部引用边蓝色主题自带-文本居中代码:123&#123;% cq %&#125;人海似海却无岸&#123;% endcq %&#125;效果：人海似海却无岸主题自带-引用块代码:123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125;效果:Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.David LevithanWide Awake代码:123&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125;效果:NEW: DevDocs now comes with syntax highlighting. http://devdocs.io@DevDocstwitter.com/devdocs/status/356095192085962752主题自带-note标签代码：1&lt;div class="note default"&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt;效果：default代码：1&lt;div class="note primary"&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt;效果：primary代码：1&lt;div class="note success"&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt;效果：success代码：1&lt;div class="note info"&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt;效果：info代码：1&lt;div class="note warning"&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt;效果：warning代码：1&lt;div class="note danger"&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;效果：danger代码：1&lt;div class="note danger no-icon"&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt;效果：danger no-icon可以在主题配置文件中需要配置下:123456789# Note tag (bs-callout).note: # 风格 style: flat # 要不要图标 icons: true # 圆角矩形 border_radius: 3 light_bg_offset:主题自带-label标签可以在主题配置文件中需要配置下:12# Label tag.label: true效果如下（@ 前面的是label的名字，后面的是要显示的文字）：代码：1&#123;% label default@default %&#125;效果：default可以将default换成primary，success，info，warning，danger，试试效果吧！主题自带-tabs(选项卡)标签可以在主题配置文件中需要配置下:1234567# Tabs tag.tabs: enable: true transition: tabs: true labels: true border_radius: 0代码：1234567891011&#123;% tabs 选项卡, 2 %&#125;&lt;!-- tab --&gt;**这是选项卡 1** 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 2**&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 3** 哇，你找到我了！φ(≧ω≦*)♪～&lt;!-- endtab --&gt;&#123;% endtabs %&#125;效果1：选项卡 1选项卡 2选项卡 3这是选项卡 1 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……这是选项卡 2这是选项卡 3 哇，你找到我了！φ(≧ω≦*)♪～效果2：first tabsecond tabfirstsecond说明:源码中, 2表示一开始在第二个选项卡，非必须，若数值为-1则隐藏选项卡内容。更多用法请查看这个页面主题自带-下载样式按钮代码：1&#123;% btn https://www.baidu.com, 点击下载百度, download fa-lg fa-fw %&#125;效果:：点击下载百度关于按钮的更多使用可以前往这个页面查看代码：12&lt;a id="download" href="https://git-scm.com/download/win"&gt;&lt;i class="fa fa-download"&gt;&lt;/i&gt;&lt;span&gt; Download Now&lt;/span&gt;&lt;/a&gt;效果: Download Now这也是调用了Font Awesome的方法文档中增加图标代码：123456- &lt;i class="fa fa-pencil"&gt;&lt;/i&gt;支持Markdown&lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件&lt;/i&gt;- &lt;i class="fa fa-cloud-upload"&gt;&lt;/i&gt;一件部署&lt;i&gt;只需一条指令即可部署到Github Pages，或其他网站&lt;/i&gt;- &lt;i class="fa fa-cog"&gt;&lt;/i&gt;丰富的插件&lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript&lt;/i&gt;效果：支持MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件一件部署只需一条指令即可部署到Github Pages，或其他网站丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript代码：123&lt;i class="fa fa-github"&gt;&lt;/i&gt;&lt;i class="fa fa-github fa-lg"&gt;&lt;/i&gt;&lt;i class="fa fa-github fa-2x"&gt;&lt;/i&gt;效果：，，采用的是Font Awesome的图标表格注意表格横线的冒号—-：，此表示是否居中代码：12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 |效果：TablesAreCoolcol 3 isright-aligned$1600col 2 iscentered$12zebra stripesare neat$1代码块顶部样式这里指的是```代码块，而不是行内代码块（代码），它的用法如下：[title] [url] [link-text]1中间写代码，顶部不会出现[language]，但是已经应用在代码当中[language] 是代码语言的名称，用来设置代码块颜色高亮，非必须；[title] 是顶部左边的说明，非必须；[url] 是顶部右边的超链接地址，非必须；[link text] 如它的字面意思，超链接的名称，非必须亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加[]了，要这样写：[] [] [url] [link text]例如：测试12r = request.get("www.baidu.com")print(r.text)红色-和绿色+的样式哪来的？哈哈哈，原来这也是一种语言，叫diff，所以你只需在 [language] 这写diff，然后在相应代码前面加上-和+就行了测试12+ r = request.get("www.baidu.com")- print(r.text)当然，要是你不满意顶部的文字样式，也可以自己在hexo/source/_data/styles.styl自定义：文件位置：~hexo/source/_data/styles.styl12345678910// 文章```代码块顶部样式.highlight figcaption &#123; margin: 0em; padding: 0.5em; background: #1D1F21; border-bottom: 0px solid #e9e9e9;&#125;.highlight figcaption a &#123; color: rgb(80, 115, 184);&#125;1.注脚的内容 ↩]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT主题优化记录]]></title>
    <url>%2F%2Fblog%2FNexT%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%95.html</url>
    <content type="text"><![CDATA[NexT主题优化历程一九年八月十五日正式开始使用NexT作为博客主题，根据文档进行基本配置优化修改主题配置文件123456789101112131415161718Scheme: Muselanguage: zh-Hansmenu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive schedule: /schedule/ || calendaravatar: url: http://image.joelyings.com/%E6%96%91.jpgsidebar: position: right display: postNexT 7.3 版本添加自定义样式最新版本的NexT添加自定义样式，已经找不到_custom/custom.styl文件，根据更新内容在博客目录下的source文件夹内，新建一个_data文件夹，注意不是主题下的source文件夹然后新建对应的想要添加的样式文件，如下custom_file_path中所示，添加首页文章阴影等放在hexo/source/_data/styles.styl中12345678910111213# Define custom file paths.# Create your custom files in site directory `source/_data` and uncomment needed files below.custom_file_path: #head: source/_data/head.swig #header: source/_data/header.swig #sidebar: source/_data/sidebar.swig # postMeta: source/_data/post-meta.swig #postBodyEnd: source/_data/post-body-end.swig #footer: source/_data/footer.swig #bodyEnd: source/_data/body-end.swig #variable: source/_data/variables.styl #mixin: source/_data/mixins.styl style: source/_data/styles.styl修改文章页宽打开themes/next/source/css/_variables/base.styl，找到以下字段并修改为合适的宽度：1234- $content-desktop-large = 800px+ $content-desktop-large = 1000px- $content-desktop-largest = 900px+ $content-desktop-largest = 1000px修改小型代码块颜色themes\next\source\css\_variables\base.styl12345678- $code-foreground = $black-light;+ $code-foreground = $my-code-foreground;- $code-background = $gainsboro;+ $code-background = $my-code-background;// 自定义的颜色$my-code-foreground = #ff6600 // 用``围出的代码块字体颜色$my-code-background = #fff // 用``围出的代码块背景颜色1234567// Code &amp; Code Blocks 用``围出来的的代码块// --------------------------------------------------$code-font-family = $font-family-monospace;$code-border-radius = 4px;$code-font-size = 15px;$code-foreground = $my-code-foreground;$code-background = $my-code-background;修改hexo/source/_data/styles.styl，加入自定义样式123456// 文章``代码块的自定义样式code &#123; color: #ff0000; background: #fbf7f8; margin: 2px;&#125;修改链接文字样式在hexo/source/_data/styles.styl中添加修改文件 themes\next\source\css_common\components\post\post.styl，在末尾添加如下css样式，：1234567891011//文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125;其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义[Read More]按钮样式在hexo/source/_data/styles.styl中添加：hexo/source/_data/styles.styl12345678910111213141516171819// [Read More]按钮样式.post-button .btn &#123; color: #555 !important; background-color: rgb(255, 255, 255); border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); border: none !important; transition-property: unset; padding: 0px 15px;&#125;.post-button .btn:hover &#123; color: rgb(255, 255, 255) !important; border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);&#125;网易云音乐外链hexo\themes\next\layout\_macro\sidebar.swig1234 &lt;div class="sidebar-inner"&gt; ......+ &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=332 height=86 src="//music.163.com/outchain/player?type=2&amp;id=22842399&amp;auto=1&amp;height=66"&gt;&lt;/iframe&gt; &lt;/div&gt;修改旋转头像在themes\next\source\css\_common\components\sidebar\sidebar-author.styl中：12345678910111213141516171819.site-author-image &#123; border: $site-author-image-border-width solid $site-author-image-border-color; display: block; height: $site-author-image-height; margin: 0 auto; max-width: $site-author-image-width; padding: $site-author-image-padding;+ //设置圆形+ border-radius: 50%;+ transition: 2s all; if (hexo-config('avatar.rounded')) &#123; border-radius: 50%; &#125;&#125;+//旋转+.site-author-image:hover&#123;+ transform: rotate(360deg);+&#125;文章自动显示部分内容在主题配置文件中，搜索auto_excerpt：1234auto_excerpt:- enable: false+ enable: true length: 150友情链接在主题配置文件中搜索关键字Blog rolls,添加自己需要的链接1234links: #Title: http://example.com baidu: https://www.baidu.com/ google: https://www.google.com/本地搜索在Hexo的根目录下执行以下命令。1npm install hexo-generator-searchdb --save打开主题配置文件,搜索关键字local_search,将enable的值设置为 true1234# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true修改hexo/_config.yml站点配置文件,末尾新增以下代码:123456# 本地搜索search: path: search.xml field: post format: html limit: 10000一九年八月十六日添加RSS在Hexo根目录执行安装指令，安装 hexo-generator-feed 插件1npm install hexo-generator-feed --save打开站点配置文件，追加feed信息1234567# 设置RSSfeed: type: rss2 path: rss2.html limit: 5 hub: content: 'true'打开主题配置文件，找到rss，设置为1rss: /atom.xml添加社交链接在主题配置文件中，找到social属性，添加社交链接，步骤如下12345social: E-Mail: mailto:yourname@gmail.com || envelope Google: https://plus.google.com/yourname || google Twitter: https://twitter.com/yourname || twitter Facebook: https://www.facebook.com/yourname || facebook格式为： 社交平台名称：链接设置代码高亮在站点配置文件中，搜索highlight关键词12345highlight: enable: true line_number: true auto_detect: true tab_replace:文字自动检测默认不启动，改成true使其起作用。再到主题配置文件，搜索highlight_theme关键词，修改代码主题样式1234# Code Highlight theme# Available values: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night添加复制按钮在主题配置文件中，搜索关键词codeblock，将copy_button的enable值修改为trueshow_result: true显示复制成功123456789101112codeblock: # Code Highlight theme # Available values: normal | night | night eighties | night blue | night bright # See: https://github.com/chriskempson/tomorrow-theme highlight_theme: night # Add copy button on codeblock copy_button: enable: true # Show text copy result. show_result: true # Available values: default | flat | mac style: flat添加阅读次数统计主题配置文件中，搜索关键词busuanzi_count，设置文章阅读次数统计及网站访客量12345678910# Show Views/Visitors of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzibusuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye添加 README.md每个项目README.md文件可以简单说明这个项目的用途。在Hexo目录下的source根目录下添加一个README.md 文件，修改站点配置文件，将skip_render参数的值设置为1skip_render: README.md再次使用hexo d命令部署博客的时候就不会在渲染README.md这个文件。自定义网站头像自定义头像可以使用比特虫网站制作 将图片的.png格式放在themes/next/source/images在主题配置文件中，按以下修改1234567favicon: small: /images/favicon-16x16-next.png #你的头像名称 medium: /images/favicon-32x32-next.png #你的头像名称 apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml我的是将图片名直接填在里面，改为如下，当然将图片名修改成上面原来的样式也可以12345678favicon: small: /images/favicon_op_16.png medium: /images/favicon_op_32.png apple_touch_icon: /images/op.jpeg # safari_pinned_tab: /images/logo.svg # safari_pinned_tab: /images/op.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xmljpeg转svg文件开启版权声明打开主题配置文件,搜索关键字creative_commons, post改为true12345creative_commons: license: by-nc-sa sidebar: false post: true language:优化urlseo搜索引擎优化认为，网站的最佳结构是三层，但是默认hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，url不利于搜索引擎搜索。因此，我们可以将url直接改成sitename/blog/title的形式，同时title最好是用英文，在站点配置文件搜索permalink关键词，并修改如下1234url: https://chloneda.github.io/root: /permalink: /blog/:title.htmlpermalink_defaults:修改标签云(tagcloud)颜色在主题配置文件中开启标签云themes\next\_config.yml12345678910# TagCloud settings for tags page.tagcloud: # If true, font size, font color and amount of tags can be customized enable: true # All values below are same as default, change them by yourself min: 12 # Minimun font size in px max: 30 # Maxium font size in px start: "#ccc" # Start color (hex, rgba, hsla or color keywords) end: "#111" # End color (hex, rgba, hsla or color keywords) amount: 200 # Amount of tags, change it if you have more than 200 tags修改themes/next/layout/page.swig文件，加入自定义样式修改对应参数值即可，参数说明见Hexo官方文档12- &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 200, color: true, start_color: '#ccc', end_color: '#111'&#125;) &#125;&#125;+ &#123;&#123; tagcloud(&#123;min_font: 13, max_font: 31, amount: 1000, color: true, start_color: '#9733EE', end_color: '#FF512F'&#125;) &#125;&#125;修改文章底部#号标签为图标修改模板/themes/next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将#换成123&lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;&lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tag"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;隐藏底部”强力驱动”内容修改themes/next/_config.yml文件,将powered和enable设置为false123456789101112131415161718192021222324252627282930313233footer: # Specify the date when the site was setup. If not defined, current year will be used. since: 2019 # Icon between year and copyright info. icon: # Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/ # `heart` is recommended with animation in red (#ff0000). name: user # If you want to animate the icon, set it to true. animated: false # Change the color of icon, using Hex Code. color: "#808080" # If not defined, `author` from Hexo `_config.yml` will be used. copyright: powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false # Beian ICP information for Chinese users. See: http://www.beian.miit.gov.cn beian: enable: false icp:文章末尾添加”本文结束”标记修改在themes/next/layout/_macro/post.swig中，在wechat-subscriber.swig之前添加如下代码1234+ &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;---------------- The End ----------------&lt;/div&gt; &#123;%- if theme.wechat_subscriber.enable %&#125; &#123;&#123; partial('../_partials/post/wechat-subscriber.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125; &#123;%- endif %&#125;移动端显示back-to-top按钮和侧栏修改主题配置themes/next/_config.yml12# Enable sidebar on narrow viewonmobile: true设置动态titlethemes/next/source/js/src下创建dytitle.js文件12345678910111213141516var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="shortcut icon"]').attr('href', "/TEP.png"); document.title = 'w(ﾟДﾟ)w 出BUG啦！！！！'; clearTimeout(titleTime); &#125; else &#123; $('[rel="shortcut icon"]').attr('href', "/favicon.png"); document.title = '♪(^∇^*)又好了。。。 ' + OriginTitile; titleTime = setTimeout(function () &#123; document.title = OriginTitile; &#125;, 2000); &#125;&#125;);修改themes/next/layout/layout.swing,添加&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/dytitle.js&quot;&gt;&lt;/script&gt;：123456&lt;!DOCTYPE html&gt;&#123;# NexT version #&#125;&#123;%- set version = next_env('version') %&#125;&lt;script type="text/javascript" src="/js/src/dytitle.js"&gt;&lt;/script&gt;侧栏加入已运行的时间进入themes/next/layout/_partials/footer.swig文件，在文件合适的地方(我的是在文件末尾)放上如下代码123456789101112131415161718192021222324252627&lt;!--添加网站的运行时间--&gt;&lt;div id="days"&gt;&lt;/div&gt;&lt;script&gt;function show_date_time()&#123; window.setTimeout("show_date_time()", 1000); BirthDay=new Date("08/07/2019 21:13:14"); //修改为自己的blog建站时间 月/日/年 时:分:秒 today=new Date(); timeold=(today.getTime()-BirthDay.getTime()); sectimeold=timeold/1000 secondsold=Math.floor(sectimeold); msPerDay=24*60*60*1000 e_daysold=timeold/msPerDay daysold=Math.floor(e_daysold); e_hrsold=(e_daysold-daysold)*24; hrsold=setzero(Math.floor(e_hrsold)); e_minsold=(e_hrsold-hrsold)*60; minsold=setzero(Math.floor((e_hrsold-hrsold)*60)); seconds=setzero(Math.floor((e_minsold-minsold)*60)); document.getElementById('days').innerHTML="本站已安全运行"+daysold+"天"+hrsold+"小时"+minsold+"分"+seconds+"秒";&#125;function setzero(i)&#123; if (i&lt;10) &#123;i="0" + i&#125;; return i;&#125;show_date_time();&lt;/script&gt;代码在不同的位置会有不同的效果点击出现爱心效果在/themes/next/source/js/src/love.js下新建文件love.js，没有src文件夹可以新建一个，接着把该链接下的代码拷贝粘贴到love.js文件中1!function (e, t, a) &#123; function n() &#123; c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"), o(), r() &#125; function r() &#123; for (var e = 0; e &lt; d.length; e++)d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y-- , d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = "left:" + d[e].x + "px;top:" + d[e].y + "px;opacity:" + d[e].alpha + ";transform:scale(" + d[e].scale + "," + d[e].scale + ") rotate(45deg);background:" + d[e].color + ";z-index:99999"); requestAnimationFrame(r) &#125; function o() &#123; var t = "function" == typeof e.onclick &amp;&amp; e.onclick; e.onclick = function (e) &#123; t &amp;&amp; t(), i(e) &#125; &#125; function i(e) &#123; var a = t.createElement("div"); a.className = "heart", d.push(&#123; el: a, x: e.clientX - 5, y: e.clientY - 5, scale: 1, alpha: 1, color: s() &#125;), t.body.appendChild(a) &#125; function c(e) &#123; var a = t.createElement("style"); a.type = "text/css"; try &#123; a.appendChild(t.createTextNode(e)) &#125; catch (t) &#123; a.styleSheet.cssText = e &#125; t.getElementsByTagName("head")[0].appendChild(a) &#125; function s() &#123; return "rgb(" + ~~(255 * Math.random()) + "," + ~~(255 * Math.random()) + "," + ~~(255 * Math.random()) + ")" &#125; var d = []; e.requestAnimationFrame = function () &#123; return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123; setTimeout(e, 1e3 / 60) &#125; &#125;(), n() &#125;(window, document);在\themes\next\layout\_layout.swig文件中添加：12345678&lt;!DOCTYPE html&gt;&#123;# NexT version #&#125;&#123;%- set version = next_env('version') %&#125;&lt;script type="text/javascript" src="/js/src/dytitle.js"&gt;&lt;/script&gt;&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt;更多点击特效点击下方按钮下载相应的脚本，并置于 themes\next\source\js\src\ 目录下：礼花特效 爆炸特效 浮出爱心 浮出文字在主题自定义布局文件中添加以下代码,themes\next\layout\_custom\custom.swig123456789101112&#123;# 鼠标点击特效 #&#125;&#123;% if theme.cursor_effect == "fireworks" %&#125; &lt;script async src="/js/src/fireworks.js"&gt;&lt;/script&gt;&#123;% elseif theme.cursor_effect == "explosion" %&#125; &lt;canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" &gt;&lt;/canvas&gt; &lt;script src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"&gt;&lt;/script&gt; &lt;script async src="/js/src/explosion.min.js"&gt;&lt;/script&gt;&#123;% elseif theme.cursor_effect == "love" %&#125; &lt;script async src="/js/src/love.min.js"&gt;&lt;/script&gt;&#123;% elseif theme.cursor_effect == "text" %&#125; &lt;script async src="/js/src/text.js"&gt;&lt;/script&gt;&#123;% endif %&#125;如果custom.swig文件不存在，需要手动新建并在布局页面中body末尾引入：themes\next\layout\_layout.swig12345678 ... &#123;% include '_third-party/exturl.swig' %&#125; &#123;% include '_third-party/bookmark.swig' %&#125; &#123;% include '_third-party/copy-code.swig' %&#125;+ &#123;% include '_custom/custom.swig' %&#125; &lt;/body&gt; &lt;/html&gt;在主题配置文件中添加以下代码：themes\next\_config.yml12# mouse click effect: fireworks | explosion | love | textcursor_effect: fireworks这样即可在配置文件中一键快速切换鼠标点击特效如果从本地加载 JS 脚本速度较慢，可以考虑将脚本放到 CDN 上再引入增加内容分享服务详细参考theme-next-needmoreshare2,CDN是？修改themes/next/_config.yml主题配置文件，搜索关键字needmoreshare2，找到如下代码并做以下修改:1234567891011121314151617# 文章分享功能needmoreshare2: enable: true postbottom: enable: true options: iconStyle: default boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook float: enable: true options: iconStyle: default boxForm: vertical position: topRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook增加文章字数统计及阅读时常功能最新请参考hexo-symbols-count-time安装插件hexo-wordcount,执行以下命令:1npm install hexo-wordcount --save修改themes/next/_config.yml主题配置文件，搜索关键字post_wordcount,修改如下:123456post_wordcount: item_text: true wordcount: true #单篇文章字数 min2read: true #单篇阅读时长 totalcount: true #站点总字数 separated_meta: true博客静态资源压缩优化用hexo生成静态文件时，默认生成的静态文件存在大量空白，而且css、js都未经压缩，这在一定程度上会影响页面的加载，所以在网上所搜有没有办法来优化这些问题？答案肯定是有，当然大部分博客都提到了使用gulp来精简代码，而我今天所要跟大家介绍的是hexo-neat插件 。我为啥不选择gulp而使用hexo-neat呢？因为用gulp需要在每次生成静态文件后，即hexo g后，都要另外执行gulp命令才能压缩静态文件；而使用hexo-neat则无须另外执行其他命令即可自动完成压缩功能，即方便了使用习惯。在站点的根目录下执行以下命令：1npm install hexo-neat --save打开blog/_config.yml全局配置文件添加如下配置：1234567891011121314151617181920212223#静态资源压缩优化# hexo-neatneat_enable: true # 启用neat# 对html优化neat_html: enable: true exclude: # 对css优化neat_css: enable: true exclude: - '*.min.css'# 对js优化neat_js: enable: true mangle: true output: compress: exclude: - '*.min.js'若压缩文件过程中出现压缩某个js文件出错，故不建议对js文件进行优化，将neat_js设置为false看板娘 live2d详细信息: https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md安装依赖:12npm install --save hexo-helper-live2dnpm install --save live2d-widget-model-wanko站点配置添加:1234567891011121314151617181920212223242526# hexo-helper-live2d配置, 参考https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.mdlive2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-shizuku display: # superSample: 2 # 超采样等级 width: 150 height: 300 position: right # 位置 hOffset: 80 mobile: show: true react: opacity: 0.7 # opacityDefault: 0.6 # 默认透明度 # opacityOnHover: 0.5 # 鼠标移上透明度 dialog: # Display dialog 显示人物对话框 enable: true hitokoto: true # 使用一言API页jio心跳参考12345678910111213footer: # Specify the date when the site was setup. If not defined, current year will be used. since: 2019 # Icon between year and copyright info. icon: # Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/ # `heart` is recommended with animation in red (#ff0000). name: heart # If you want to animate the icon, set it to true. animated: true # Change the color of icon, using Hex Code. color: "＃ff0000"一九年八月十七日文章模板功能及写作样式文章模板功能主要用于通过命令新建文章时，初始化文章设置，参见 Hexo 官方文档的Front-matter 和页面变量，总结如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107/* ！！！！！！！！！！** 每一项的 : 后面均有一个空格** 且 : 为英文符号** ！！！！！！！！！！*/title:/* 文章标题，可以为中文 */date:/* 建立日期，如果自己手动添加，请按固定格式** 就算不写，页面每篇文章顶部的发表于……也能显示** 只要在主题配置文件中，配置了 created_at 就行** 那为什么还要自己加上？** 自定义文章发布的时间*/updated:/* 更新日期，其它与上面的建立日期类似** 不过在页面每篇文章顶部，是更新于……** 在主题配置文件中，是 updated_at*/permalink:/* 若站点配置文件下的 permalink 配置了 title** 则可以替换文章 URL 里面的 title（文章标题）*/categories:/* 分类，支持多级，比如：- technology- computer- computer-aided-art则为technology/computer/computer-aided-art（不适用于 layout: page）*/tags:/* 标签** 多个可以这样写[标签1,标签2,标签3]** （不适用于 layout: page）*/description:/* 文章的描述，在每篇文章标题下方显示** 并且作为网页的 description 元数据** 如果不写，则自动取 &lt;!-- more --&gt;** 之前的文字作为网页的 description 元数据** 建议每篇文章都务必加上！*/keywords:/* 关键字，并且作为网页的 keywords 元数据** 如果不写，则自动取 tags 里的项** 作为网页的 keywords 元数据*/comments:/* 是否开启评论** 默认值是 true** 要关闭写 false*/layout:/* 页面布局，默认值是 post，默认值可以在** 站点配置文件中修改 default_layout** 另：404 页面可能用到，将其值改为 false*/type:/* categories，目录页面** tags，标签页面** picture，用来生成 group-pictures** quote？** https://reuixiy.github.io/uncategorized/2010/01/01/test.html*/photos:/* Gallery support，用来支持画廊 / 相册，用法如下：- photo_url_1- photo_url_2- photo_url_3https://reuixiy.github.io/uncategorized/2010/01/01/test.html*/link:/* 文章的外部链接** https://reuixiy.github.io/uncategorized/2010/01/01/test.html*/image:/* 自定义的文章摘要图片，只在页面展示，文章内消失** 此项只有参考本文 5.14 节配置好，否则请勿添加！*/sticky:/* 文章置顶** 此项只有参考本文 5.15 节配置好，否则请勿添加！*/password:/* 文章密码，此项只有参考教程：** http://shenzekun.cn/hexo的next主题个性化配置教程.html** 第 24 节，配置好，否则请勿添加！** 发现还是有 bug 的，就是右键在新标签中打开** 然后无论是否输入密码，都能看到内容*/参考模板123456789101112131415161718192021---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;permalink:categories:tags: []description:image:---&lt;img src="https://" alt="" style="width:100%"/&gt;&lt;!-- more --&gt;######&lt;hr /&gt;好玩的写作样式根据最新版NexT主题自定义样式方法，先在hexo\source\_data\styles.styl中添加以下样式：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230// 按钮样式（为emoji特设）.btn &#123; color: #fff !important; text-decoration: none !important; border: 2px solid #222 !important;&#125;.btn:hover &#123; color: #222 !important;&#125;// 下载样式a#download &#123;display: inline-block;padding: 0 10px;color: #000;background: transparent;border: 2px solid #000;border-radius: 2px;transition: all .5s ease;font-weight: bold;&amp;:hover &#123;background: #000;color: #fff;&#125;&#125;/ /颜色块-黄span#inline-yellow &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #f0ad4e;&#125;// 颜色块-绿span#inline-green &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #5cb85c;&#125;// 颜色块-蓝span#inline-blue &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #2780e3;&#125;// 颜色块-紫span#inline-purple &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #9954bb;&#125;// 左侧边框红色块级p#div-border-left-red &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #df3e3e;&#125;// 左侧边框黄色块级p#div-border-left-yellow &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #f0ad4e;&#125;// 左侧边框绿色块级p#div-border-left-green &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #5cb85c;&#125;// 左侧边框蓝色块级p#div-border-left-blue &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #2780e3;&#125;// 左侧边框紫色块级p#div-border-left-purple &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-left-width: 5px;border-radius: 3px;border-left-color: #9954bb;&#125;// 右侧边框红色块级p#div-border-right-red &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #df3e3e;&#125;// 右侧边框黄色块级p#div-border-right-yellow &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #f0ad4e;&#125;// 右侧边框绿色块级p#div-border-right-green &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #5cb85c;&#125;// 右侧边框蓝色块级p#div-border-right-blue &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #2780e3;&#125;// 右侧边框紫色块级p#div-border-right-purple &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-right-width: 5px;border-radius: 3px;border-right-color: #9954bb;&#125;// 上侧边框红色p#div-border-top-red &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #df3e3e;&#125;// 上侧边框黄色p#div-border-top-yellow &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #f0ad4e;&#125;// 上侧边框绿色p#div-border-top-green &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #5cb85c;&#125;// 上侧边框蓝色p#div-border-top-blue &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #2780e3;&#125;// 上侧边框紫色p#div-border-top-purple &#123;display: block;padding: 10px;margin: 10px 0;border: 1px solid #ccc;border-top-width: 5px;border-radius: 3px;border-top-color: #9954bb;&#125;添加注脚安装插件[1]1npm install hexo-reference --save用法如下：1this is a basic footnote[/^1] ##用的时候把/去掉在文章末尾添加：1[/^1]: basic footnote content ##用的时候把/去掉this is a basic footnote[1]文字背景色块代码:1&lt;span id="inline-blue"&gt;站点配置文件&lt;/span&gt;，&lt;span id="inline-purple"&gt;主题配置文件&lt;/span&gt;效果：站点配置文件， 主题配置文件引用边框变色代码:12&lt;p id="div-border-left-red"&gt;左侧引用边红色&lt;/p&gt;&lt;p id="div-border-top-blue"&gt;顶部引用边蓝色&lt;/p&gt;效果：左侧引用边红色顶部引用边蓝色主题自带-文本居中代码:123&#123;% cq %&#125;人海似海却无岸&#123;% endcq %&#125;效果：人海似海却无岸主题自带-引用块代码:123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125;效果:Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.David LevithanWide Awake代码:123&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125;效果:NEW: DevDocs now comes with syntax highlighting. http://devdocs.io@DevDocstwitter.com/devdocs/status/356095192085962752主题自带-note标签代码：1&lt;div class="note default"&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt;效果：default代码：1&lt;div class="note primary"&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt;效果：primary代码：1&lt;div class="note success"&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt;效果：success代码：1&lt;div class="note info"&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt;效果：info代码：1&lt;div class="note warning"&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt;效果：warning代码：1&lt;div class="note danger"&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;效果：danger代码：1&lt;div class="note danger no-icon"&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt;效果：danger no-icon可以在主题配置文件中需要配置下:123456789# Note tag (bs-callout).note: # 风格 style: flat # 要不要图标 icons: true # 圆角矩形 border_radius: 3 light_bg_offset:主题自带-label标签可以在主题配置文件中需要配置下:12# Label tag.label: true效果如下（@ 前面的是label的名字，后面的是要显示的文字）：代码：1&#123;% label default@default %&#125;效果：default可以将default换成primary，success，info，warning，danger，试试效果吧！主题自带-tabs(选项卡)标签可以在主题配置文件中需要配置下:1234567# Tabs tag.tabs: enable: true transition: tabs: true labels: true border_radius: 0代码：1234567891011&#123;% tabs 选项卡, 2 %&#125;&lt;!-- tab --&gt;**这是选项卡 1** 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 2**&lt;!-- endtab --&gt;&lt;!-- tab --&gt;**这是选项卡 3** 哇，你找到我了！φ(≧ω≦*)♪～&lt;!-- endtab --&gt;&#123;% endtabs %&#125;效果：选项卡 1选项卡 2选项卡 3这是选项卡 1 呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈呵呵哈哈哈哈哈哈哈哈……这是选项卡 2这是选项卡 3 哇，你找到我了！φ(≧ω≦*)♪～说明:源码中, 2表示一开始在第二个选项卡，非必须，若数值为-1则隐藏选项卡内容。更多用法请查看这个页面主题自带-下载样式按钮代码：1&#123;% btn https://www.baidu.com, 点击下载百度, download fa-lg fa-fw %&#125;效果:：点击下载百度关于按钮的更多使用可以前往这个页面查看代码：12&lt;a id="download" href="https://git-scm.com/download/win"&gt;&lt;i class="fa fa-download"&gt;&lt;/i&gt;&lt;span&gt; Download Now&lt;/span&gt;&lt;/a&gt;效果: Download Now这也是调用了Font Awesome的方法文档中增加图标代码：123456- &lt;i class="fa fa-pencil"&gt;&lt;/i&gt;支持Markdown&lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件&lt;/i&gt;- &lt;i class="fa fa-cloud-upload"&gt;&lt;/i&gt;一件部署&lt;i&gt;只需一条指令即可部署到Github Pages，或其他网站&lt;/i&gt;- &lt;i class="fa fa-cog"&gt;&lt;/i&gt;丰富的插件&lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript&lt;/i&gt;效果：支持MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件一件部署只需一条指令即可部署到Github Pages，或其他网站丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript代码：123&lt;i class="fa fa-github"&gt;&lt;/i&gt;&lt;i class="fa fa-github fa-lg"&gt;&lt;/i&gt;&lt;i class="fa fa-github fa-2x"&gt;&lt;/i&gt;效果：，，采用的是Font Awesome的图标表格注意表格横线的冒号—-：，此表示是否居中代码：12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 |效果：TablesAreCoolcol 3 isright-aligned$1600col 2 iscentered$12zebra stripesare neat$1代码块顶部样式这里指的是```代码块，而不是行内代码块（代码），它的用法如下：[title] [url] [link-text]1中间写代码，顶部不会出现[language]，但是已经应用在代码当中[language] 是代码语言的名称，用来设置代码块颜色高亮，非必须；[title] 是顶部左边的说明，非必须；[url] 是顶部右边的超链接地址，非必须；[link text] 如它的字面意思，超链接的名称，非必须亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加[]了，要这样写：[] [] [url] [link text]例如：测试12r = request.get("www.baidu.com")print(r.text)红色-和绿色+的样式哪来的？哈哈哈，原来这也是一种语言，叫diff，所以你只需在 [language] 这写diff，然后在相应代码前面加上-和+就行了测试12+ r = request.get("www.baidu.com")- print(r.text)当然，要是你不满意顶部的文字样式，也可以自己在hexo/source/_data/styles.styl自定义：文件位置：~hexo/source/_data/styles.styl12345678910// 文章```代码块顶部样式.highlight figcaption &#123; margin: 0em; padding: 0.5em; background: #1D1F21; border-bottom: 0px solid #e9e9e9;&#125;.highlight figcaption a &#123; color: rgb(80, 115, 184);&#125;自定义样式引用需加入hexo/source/_data/styles.styl的代码：123456789// 自定义的引用样式blockquote.question &#123; color: #555;#颜色 border-left: 4px solid rgb(16, 152, 173);#边框粗细 background-color: rgb(227, 242, 253);#背景色 border-top-right-radius: 3px; border-bottom-right-radius: 3px; margin-bottom: 20px;&#125;效果：内容内容1&lt;blockquote class="question"&gt;内容&lt;/blockquote&gt;自定义样式 数字块需加入hexo/source/_data/styles.styl的代码：12345678910// 自定义的数字块span#inline-toc &#123; display: inline-block; border-radius: 80% 100% 90% 20%; background-color: rgb(227, 242, 253); color: #555; padding: 0.05em 0.4em; margin: 2px 5px 2px 0px; line-height: 1.5;&#125;效果：1.1&lt;span id="inline-toc"&gt;1.&lt;/span&gt;参考：https://qianling.pw/style/#TOC数字块为next主题的主页文章添加阴影效果打开themes/next/source/css/_custom/custom.styl文件添加:打开hexo/source/_data/styles.styl文件添加:详见 [NexT 7.3 版本添加自定义样式](https://joelying.github.io/blog/NexT主题优化记录.html#NexT 7.3 版本添加自定义样式)1234567// 首页文章添加阴影效果.post-block &#123; // margin-top: 60px; margin-bottom: 80px; padding: 25px; box-shadow: 0 0 10px rgba(0, 0, 0, .4);&#125;文章摘要图片俗话说：「图文并茂」，现实中用笔书写文章实现起来比较困难，但在博客上可以很轻松实现😎。首先，文章摘要（excerpt）是指每篇文章（post）在页面（page）上显示的那部分内容，也就是 [Read More] 之前的文章内容。由于它会展示在页面，因此在每篇文章的文章摘要中加一张图片，页面看起来就很美观。但是有时候可能会出现一个问题：你想从文章中选一张图片作为文章摘要图片，而这张图片由于写作要求，必须添加在文章的末尾，这样点 [Read More] 查看文章时，这张图片就会重复出现了。咋办？前提是在主题配置文件中：12345文件位置：~/blog/themes/next/_config.ymlexcerpt_description: falseauto_excerpt: enable: false首先加代码：12345678910111213141516171819202122232425262728文件位置：~/blog/themes/next/layout/_macro/post.swig &#123;% if is_index %&#125; &#123;% if post.description and theme.excerpt_description %&#125; &#123;&#123; post.description &#125;&#125; &lt;!--noindex--&gt; &lt;div class="post-button text-center"&gt; &lt;a class="btn" href="&#123;&#123; url_for(post.path) &#125;&#125;"&gt; &#123;&#123; __('post.read_more') &#125;&#125; &amp;raquo; &lt;/a&gt; &lt;/div&gt; &lt;!--/noindex--&gt; &#123;% elif post.excerpt %&#125; &#123;&#123; post.excerpt &#125;&#125;+ + &#123;% if post.image %&#125;+ &lt;div class="out-img-topic"&gt;+ &lt;img src=&#123;&#123; post.image &#125;&#125; class="img-topic" /&gt;+ &lt;/div&gt;+ &#123;% endif %&#125;+ &lt;!--noindex--&gt; &lt;div class="post-button text-center"&gt; &lt;a class="btn" href="&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __('post.more') &#125;&#125;&#123;% endif %&#125;" rel="contents"&gt; &#123;&#123; __('post.read_more') &#125;&#125; &amp;raquo; &lt;/a&gt; &lt;/div&gt; &lt;!--/noindex--&gt;为了防止有的图片宽度不够导致风格不够统一，页面不美观，需要在styles.styl中加入：文件位置：hexo/source/_data/styles.styl1234// 自定义的文章摘要图片样式img.img-topic &#123; width: 100%;&#125;最后编辑有这需求的相关文章时，在Front-matter文件最上方以—分隔的区域）加上一行：1image: urlurl即图片的链接地址～参考：issue：https://github.com/iissnan/hexo-theme-next/issues/1190文章：http://wellliu.com/2016/12/30/【转】Blog摘要配图/一九年八月十八日集成Mod分享组件Step1、获取 AppKey在 Mob 注册账号后, 点击头像进入后台, 选择shareSDK添加一个 Web应用:Step2、在主题配置文件中添加配置:123mob_share: enable: true appkey: ********Step3、在next/layout/_partials/share/里面添加mob_share.swig:1234567891011121314151617181920212223242526272829303132333435&lt;!--MOB SHARE BEGIN--&gt;&lt;div class="-hoofoo-share-title"&gt;分享到: &lt;/div&gt;&lt;div class="-hoofoo-share-buttons"&gt; &lt;div class="-mob-share-weibo -hoofoo-share-weibo -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-weibo" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt; &lt;div class="-mob-share-weixin -hoofoo-share-weixin -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-weixin" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt; &lt;div class="-mob-share-qq -hoofoo-share-qq -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-qq" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt; &lt;div class="-mob-share-twitter -hoofoo-share-twitter -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-twitter" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt; &lt;div class="-hoofoo-share-more -hoofoo-share-ui-button -mob-share-open"&gt;&lt;i class="fa fa-ellipsis-h" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="-mob-share-ui" style="display: none"&gt; &lt;ul class="-mob-share-list"&gt; &lt;li class="-mob-share-weibo"&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-weixin"&gt;&lt;p&gt;微信&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qzone"&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qq"&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-tencentweibo"&gt;&lt;p&gt;腾讯微博&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-renren"&gt;&lt;p&gt;人人网&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-kaixin"&gt;&lt;p&gt;开心网&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-douban"&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-youdao"&gt;&lt;p&gt;有道云笔记&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-mingdao"&gt;&lt;p&gt;明道&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-pengyou"&gt;&lt;p&gt;朋友网&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-facebook"&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-twitter"&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-pocket"&gt;&lt;p&gt;Pocket&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-google"&gt;&lt;p&gt;Google+&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-tumblr"&gt;&lt;p&gt;Tumblr&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-instapaper"&gt;&lt;p&gt;Instapaper&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-linkedin"&gt;&lt;p&gt;Linkedin&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class="-mob-share-close"&gt;取消&lt;/div&gt;&lt;/div&gt;&lt;div class="-mob-share-ui-bg"&gt;&lt;/div&gt;&lt;script id="-mob-share" src="http://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123;theme.mob_share.appkey&#125;&#125;"&gt;&lt;/script&gt;&lt;!--MOB SHARE END--&gt;Step4、在next/layout/post.swig中添加条件分支:1234567891011&#123;% if theme.jiathis %&#125; &#123;% include '_partials/share/jiathis.swig' %&#125; &#123;% elseif theme.baidushare %&#125; &#123;% include '_partials/share/baidushare.swig' %&#125; &#123;% elseif theme.add_this_id %&#125; &#123;% include '_partials/share/add-this.swig' %&#125; &#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125; &#123;% include '_partials/share/duoshuo_share.swig' %&#125; &#123;% elseif theme.mob_share.enable %&#125; &#123;% include '_partials/share/mob_share.swig' %&#125;&#123;% endif %&#125;Step5、在next/source/css/_common/components/third-party/里添加样式文件mob_share.styl:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980.-hoofoo-share-buttons&#123; display: inline-block;&#125;.-hoofoo-share-title&#123; font-size: 1.1em; font-weight: 200;&#125;.-hoofoo-share-ui-button&#123; cursor: pointer; background-color: #555; color: #fff; font-size: 24px; line-height: 40px; width: 40px; height: 40px; margin: 10px; border-radius: 25px; float: left; transition: background 0.4s; -moz-transition: background 0.4s; /* Firefox 4 */ -webkit-transition: background 0.4s; /* Safari 和 Chrome */ -o-transition: background 0.4s;&#125;.-hoofoo-share-weibo:hover&#123; background-color: #cf3f41;&#125;.-hoofoo-share-weixin:hover&#123; background-color: #18a01a;&#125;.-hoofoo-share-qq:hover&#123; background-color: #950c0c;&#125;.-hoofoo-share-twitter:hover&#123; background-color: #2ab3e6;&#125;.-hoofoo-share-more:hover&#123; background-color: #777;&#125;.-mob-share-weixin-qrcode-content&#123; border-radius: 4px; -webkit-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); -moz-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); -o-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);&#125;.-mob-share-weixin-qrcode&#123; margin: 5% !important; width: 90% !important; height: auto !important;&#125;.-mob-share-weixin-qrcode-close &#123; background-image: url('/lib/fancybox/source/fancybox_sprite.png') !important;//因为兼容问题把vendor改成了lib, 根据自己的路径修改&#125;.-mob-share-weixin-qrcode-close &#123; overflow: hidden; line-height: 100px !important; position: absolute !important; top: -18px !important; right: -18px !important; width: 36px !important; height: 36px !important; cursor: pointer !important; z-index: 8040 !important;&#125;/*Retina graphics!*/@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min--moz-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5)&#123; .-mob-share-weixin-qrcode-close &#123; background-image: url('/lib/fancybox/source/fancybox_sprite@2x.png') !important;//因为兼容问题把vendor改成了lib, 根据自己的路径修改 background-size: 44px 152px !important; /*The size of the normal image, half the size of the hi-res image*/ &#125;&#125;.-mob-share-close&#123; height: 4em !important; font-size: 0.8em !important; line-height: 4em !important; background: #555 !important; color: #fff !important;&#125;Step6、同一目录下的third-party.styl中添加:1@import "mob_share";Step7、在next/layout/_scripts/third-party/里添加脚本文件mob_share.swig:12345678&#123;% if theme.mob_share.enable %&#125;&lt;script type="text/javascript"&gt; //微信二维码点击背景关闭 $('body').delegate('.-mob-share-weixin-qrcode-bg','click', function()&#123; $(".-mob-share-weixin-qrcode-close").trigger("click"); &#125;); &lt;/script&gt;&#123;% endif %&#125;Step8、在next/layout/_layout.swig的body标签结束前添加:1&#123;% include '_scripts/third-party/mob_share.swig' %&#125;先看一则代码Hello World示例1234 public static void main(String[] args) &#123;+ System.out.println(&quot;Hello World!&quot;);- System.out.println(&quot;Hello World!&quot;); &#125;正确姿势, 代码片段开头:[title] [url] [link-text]1daima[language] 是代码语言的名称, 用来设置代码块颜色高亮, 非必须；[title] 是顶部左边的说明, 非必须；[url] 是顶部右边的超链接地址, 非必须；[link text] 如它的字面意思, 超链接的名称, 非必须.这 4 项应该是根据空格来分隔, 而不是[], 故请不要加[]. 除非如果你想写后面两个, 但不想写前面两个, 那么就必须加[]了, 要这样写: [] [] [url] [link text].首先关于代码块颜色高亮, 高亮的模式可以在主题配置文件中设置:123456# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: normal要颜色正确高亮, 代码语言的名称肯定要写对, 各种支持语言的名称可以查看这篇文章. 也可以在站点配置文件_config.yml中设置自动高亮:blog/_config.yml123456highlight: enable: true line_number: true# 代码自动高亮- auto_detect: false+ auto_detect: true上边的diff是通过在[language]填写diff, 然后在相应代码前面加上-和+顶部的文字样式:12345678910// 文章```代码块顶部样式.highlight figcaption &#123; margin: 0em; padding: 0.5em; background: #eee; border-bottom: 1px solid #e9e9e9;&#125;.highlight figcaption a &#123; color: rgb(80, 115, 184);&#125;一九年八月十九日设置文章背景在hexo\source\_data\styles.styl文件内增添如下代码：1234/*设置博文背景*/.main-inner &#123; background: #fff; opacity: 0.9;background后为rgb颜色代码，百度来一个rgb色值粘贴即可替换博文背景颜色（替换了也很丑）opacity后数值为博文背景透明度，可设置0.0-1.0数值，值越小透明度越高。修改博客字体在 Google Fonts 上找到心仪的字体，然后在主题配置文件中为不同的应用场景配置字体：themes\next\_config.yml123456789101112131415161718192021222324252627282930font: enable: true # 外链字体库地址，例如 //fonts.googleapis.com (默认值) host: # 全局字体，应用在 body 元素上 global: external: true family: Monda # 标题字体 (h1, h2, h3, h4, h5, h6) headings: external: true family: Roboto Slab # 文章字体 posts: external: true family: # Logo 字体 logo: external: true family: # 代码字体，应用于 code 以及代码块 codes: external: true family:粒子漂浮聚合该功能由theme-next-canvas-nest插件提供，在根目录下执行如下命令：1$ git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest然后在主题配置文件中设置canvas_nest: true即可。Next v6.5.0 及以上版本支持更多的自定义选项：themes\next\_config.yml1234567canvas_nest: enable: true onmobile: true # 是否在移动端显示 color: &apos;0,0,255&apos; # 动态背景中线条的 RGB 颜色 opacity: 0.5 # 动态背景中线条透明度 zIndex: -1 # 动态背景的 z-index 属性值 count: 99 # 动态背景中线条数量Three 三维动效theme-next-three插件提供了三个类型的背景动效，应用效果如下：在根目录下执行如下命令安装相关依赖：1$ git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three然后在主题配置文件中设置开启对应的动效选项即可。themes\next\_config.yml12345678# JavaScript 3D library.# Dependencies: https://github.com/theme-next/theme-next-three# three_wavesthree_waves: true# canvas_linescanvas_lines: false# canvas_spherecanvas_sphere: false个人认为在站点中添加动态背景并没有实际的意义，只会凭空增加页面内存占用及 CPU 消耗，所以本站没有添加任何动态背景随机三角丝带该功能由 Vue 作者 尤雨溪 首创。本章节中核心代码来源于 DIYgod 编写的 sagiri 主题。点击下方按钮下载相应的脚本，并置于themes\next\source\js\目录下：随机三角丝带在主题自定义布局文件中添加以下代码：themes\next\layout\_custom\custom.swig123456789101112131415&#123;# 随机三角丝带背景 #&#125;&#123;% if theme.evanyou %&#125; &lt;canvas id=&quot;evanyou&quot;&gt;&lt;/canvas&gt; &lt;style&gt; #evanyou &#123; position: fixed; width: 100%; height: 100%; top: 0; left: 0; z-index: -1; &#125; &lt;/style&gt; &lt;script src=&quot;/js/evan-you.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;如果custom.swig文件不存在，需要手动新建并在布局页面中body末尾引入：themes\next\layout\_layout.swig12345678 ... &#123;% include &apos;_third-party/exturl.swig&apos; %&#125; &#123;% include &apos;_third-party/bookmark.swig&apos; %&#125; &#123;% include &apos;_third-party/copy-code.swig&apos; %&#125;+ &#123;% include &apos;_custom/custom.swig&apos; %&#125; &lt;/body&gt; &lt;/html&gt;在主题配置文件中添加以下代码：themes\next\_config.yml12# colorful trilateral riband backgroundevanyou: true如果从本地加载 JS 脚本速度较慢，可以考虑将脚本放到 CDN 上再引入边缘摆动效果点击下方按钮下载脚本，并置于themes\next\source\js\目录下：wobblewindow.js在主题自定义布局文件中添加以下代码：themes\next\layout\_custom\custom.swig12345678910111213141516171819202122232425262728293031323334353637383940414243&#123;# wobble窗口摆动特效 #&#125;&#123;% if theme.wobble %&#125; &lt;script src=&quot;/js/wobblewindow.js&quot;&gt;&lt;/script&gt; &lt;script&gt; //只在桌面版网页启用特效 if( window.innerWidth &gt; 768 )&#123; $(document).ready(function () &#123; &#123;% if theme.wobble.header %&#125; $(&apos;#header&apos;).wobbleWindow(&#123; radius: &#123;&#123; theme.wobble.radius &#125;&#125;, movementTop: false, movementLeft: false, movementRight: false, debug: false, &#125;); &#123;% endif %&#125; &#123;% if theme.wobble.sidebar %&#125; $(&apos;#sidebar&apos;).wobbleWindow(&#123; radius: &#123;&#123; theme.wobble.radius &#125;&#125;, movementLeft: false, movementTop: false, movementBottom: false, position: &apos;fixed&apos;, debug: false, &#125;); &#123;% endif %&#125; &#123;% if theme.wobble.footer %&#125; $(&apos;#footer&apos;).wobbleWindow(&#123; radius: &#123;&#123; theme.wobble.radius &#125;&#125;, movementBottom: false, movementLeft: false, movementRight: false, offsetX: &#123;&#123; theme.wobble.offset &#125;&#125;, position: &apos;absolute&apos;, debug: false, &#125;); &#123;% endif %&#125; &#125;); &#125; &lt;/script&gt;&#123;% endif %&#125;如果custom.swig文件不存在，需要手动新建并在布局页面中body末尾引入：12345678910themes\next\layout\_layout.swig ... &#123;% include '_third-party/exturl.swig' %&#125; &#123;% include '_third-party/bookmark.swig' %&#125; &#123;% include '_third-party/copy-code.swig' %&#125;+ &#123;% include '_custom/custom.swig' %&#125; &lt;/body&gt; &lt;/html&gt;在自定义样式文件中添加以下样式：themes\next\source\css_custom\custom.styl，NexT7.3版本在hexo\source\_data\style.styl添加自定义样式1234567891011121314151617181920212223242526272829//窗口波动效果相关样式if hexo-config('wobble') &#123; .sidebar &#123; box-shadow: none; &#125; .wobbleTransparentBK&#123; background-color: rgba(0,0,0,0) !important; &#125; .wobbleTransparentLine&#123; border-color: rgba(0,0,0,0) !important; &#125; //Next.Muse中为Header和Footer添加背景色 #header, #footer &#123; background-color: rgb(245, 245, 245); &#125; //防止sidebar和footer同时开启动效时堆叠异常 #sidebar, header &#123; z-index: 1 !important; &#125; //防止挡住页末文章的阅读全文按钮 .main &#123; padding-bottom: 200px; &#125;&#125;Next.Muse主题方案中Header和Footer是没有背景色的，所以需要添加背景色后才能看出边缘摆动效果。另外，实现边缘摆动效果所需的z-index属性可能会导致元素堆叠异常，需要添加以上样式来矫正在主题配置文件中添加以下代码：themes\next\_config.yml1234567# window wobllewobble: enable: true # 是否开启边缘波动效果 radius: 50 # 波动半径 sidebar: true # 开启侧边栏边缘摆动 header: true # 开启头部边缘摆动 footer: true # 开启脚部边缘摆动用户可以根据需要在配置文件中为选择开启边缘摆动效果的布局元素。刷新浏览器，然后将鼠标移动到布局边缘上尽情的挑逗它吧如果从本地加载 JS 脚本速度较慢，可以考虑将脚本放到 CDN 上再引入个性化回到顶部从DIYgod的博客 里扒来的，效果如下：首先，找到自己喜欢的图片素材放到source\images\目录下你可以点击下方按钮下载本站所使用的小猫上吊素材（ 小猫咪这么可爱，当然要多放点孜然啦…）下载图片然后在自定义样式文件中添加如下代码：hexo\source\_data\styles.styl1234567891011121314151617181920//自定义回到顶部样式.back-to-top &#123; right: 60px; width: 70px; //图片素材宽度 height: 900px; //图片素材高度 top: -900px; bottom: unset; transition: all .5s ease-in-out; background: url(&quot;/images/scroll.png&quot;); //隐藏箭头图标 &gt; i &#123; display: none; &#125; &amp;.back-to-top-on &#123; bottom: unset; top: 100vh &lt; (900px + 200px) ? calc( 100vh - 900px - 200px ) : 0px; &#125;&#125;刷新浏览器即可预览效果。打字特效本章节参考千灵夙赋 | Hexo 优化汇总 #31，原文出自[ ]龙笑天下 | 给 WordPress 博客网站添加评论输入打字礼花及震动特效](https://www.ilxtx.com/comment-input-effects.html)点击下方按钮下载相应的脚本，并置于themes\next\source\js\目录下：打字特效在主题自定义布局文件中添加以下代码：themes\next\layout\_custom\custom.swig123456789&#123;# 打字特效 #&#125;&#123;% if theme.typing_effect %&#125; &lt;script src=&quot;/js/activate-power-mode.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; POWERMODE.colorful = &#123;&#123; theme.typing_effect.colorful &#125;&#125;; POWERMODE.shake = &#123;&#123; theme.typing_effect.shake &#125;&#125;; document.body.addEventListener(&apos;input&apos;, POWERMODE); &lt;/script&gt;&#123;% endif %&#125;如果custom.swig文件不存在，需要手动新建并在布局页面中body末尾引入：themes\next\layout\_layout.swig12345678 ... &#123;% include '_third-party/exturl.swig' %&#125; &#123;% include '_third-party/bookmark.swig' %&#125; &#123;% include '_third-party/copy-code.swig' %&#125;+ &#123;% include '_custom/custom.swig' %&#125; &lt;/body&gt; &lt;/html&gt;在主题配置文件中添加以下代码：themes\next\_config.yml1234# typing effecttyping_effect: colorful: true # 礼花特效 shake: false # 震动特效如果从本地加载 JS 脚本速度较慢，可以考虑将脚本放到 CDN 上再引入添加图片灯箱添加灯箱功能，实现点击图片后放大聚焦图片，并支持幻灯片播放、全屏播放、缩略图、快速分享到社交媒体等，该功能由fancyBox提供，效果如下在根目录下执行以下命令安装相关依赖：1$ git clone https://github.com/theme-next/theme-next-fancybox3 themes/next/source/lib/fancybox在主题配置文件中设置fancybox: true：themes\next\_config.yml1fancybox: true刷新浏览器即可生效。一九年八月二十一日顶部页面加载进度条详见https://github.com/theme-next/theme-next-pace进度条样式-翻墙才能看见具体样式进入主题文件夹下，在主题文件夹下，例如themes\next下，获取pace的仓库1git clone https://github.com/theme-next/theme-next-pace source/lib/pace完成后，在主题配置文件中开启设置，并选择喜欢的进度条样式themes\next\_config.yml123456pace: enable: true # Themes list: # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal theme: minimal并且，如果你想使用CDN，那么需要设置:themes\next\_config.yml1234vendors: ... pace: //cdn.jsdelivr.net/npm/pace-js@1/pace.min.js pace_css: //cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.css一九年八月二十三日调整标签页与分类页没有内容的问题原来只是hexo new page tags，之后就没有修改，hexo\source\tags\index.md的内容只是：hexo\source\tags\index.md12345---layout: tagtitle: 标签date: 2019-08-12 14:44:58---分类页也是如此hexo\source\categories\index.md12345---layout: categorytitle: 分类date: 2019-08-12 14:44:58---查看官方文档之后，发现漏了一步…正确做法如下：新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：12345title: 标签测试文章tags: - Testing - Another Tag---请参阅Hexo的分类与标签文档，了解如何为文章添加标签或者分类。新建页面设置页面类型编辑菜单在终端窗口下，定位到Hexo站点目录下。使用hexo new page新建一个页面，命名为tags：12$ cd your-hexo-site$ hexo new page tags编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：1234title: 标签date: 2014-12-22 12:39:04type: "tags"---在菜单中添加链接。编辑主题配置文件， 添加tags到menu中，如下:1234menu: home: / archives: /archives tags: /tags现在的两个index.md文件hexo\source\tags\index.md12345---title: 标签date: 2019-08-12 14:44:58type: &quot;tags&quot;---分类页也是如此hexo\source\categories\index.md12345---title: 分类date: 2019-08-12 14:48:57type: &quot;categories&quot;---文章评分在next\_config.yml中搜索rating，前往https://widgetpack.com注册后将Id填入即可，这里的评分方式可以有三种不同的途径，一种默认是登录twitter等社交网站账号才能评分，另一种是根据浏览用户的IP地址评分，还有第三种…，不建议使用第一种我在这里设置的就是根据IP来的，在widgetpack应用左侧菜单栏中选择rating，setting，将Vote via，设置为IP address即可12345# To get your ID visit https://widgetpack.comrating: enable: true id: # &lt;app_id&gt; color: fc6423也建议在侧栏 &gt; Site &gt; Setting 中勾选 Private 选项(别勾，勾了好像就看不到星星了…)，上面两步勾选后别忘了点击页面右下方的 SAVE SETTING 绿色按钮保存如果感觉上下留白太多，咋整？浏览器 F12 找元素，调成自己喜欢的值，然后 Copy 到 custom.styl 即可，参考本文 4.2 节。经过上面的配置，默认最下面只会显示 5 颗小星星，简洁但不明了😂，怎么加上文字说明呢？编辑下面这个文件，Ctrl + F 搜索 rating，找到这段，对比我给出的，在绿色这行所示的位置，加上自己想要的说明和样式即可1234567 &#123;% if theme.rating.enable %&#125; &lt;div class=&quot;wp_rating&quot;&gt;+ &lt;div style=&quot;color: rgba(0, 0, 0, 0.75); font-size:13px; letter-spacing:3px&quot;&gt;(&amp;gt;看完记得五星好评哦亲&amp;lt;)&lt;/div&gt; &lt;div id=&quot;wpac-rating&quot;&gt;&lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125;评论系统如果上面你已经注册了LeanCloud(没有注册的点这里,现在需要实名认证),那么只要把appid和appkey设置下即可,修改主题配置文件:1234567891011121314# 评论系统# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true appid: #your id appkey: #your key notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size一九年八月二十八日点击头像回到博客首页可能是最新版本NexT 7.3的原因，在/themes/next/layout/_macro/sidebar.swig中我并没有找到参考其他大佬的可以修改的地方，经过一番查看后修改文件hexo\themes\next\layout\_partials\sidebar\site-overview.swig，增加以下两行代码即可:hexo\themes\next\layout\_partials\sidebar\site-overview.swig1234567&#123;%- if theme.avatar.url %&#125;+ &lt;a href="/"&gt; &lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar.url | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; author &#125;&#125;"&gt;+ &lt;/a&gt; &#123;%- endif %&#125;站点加速更改默认Google字体库访问系统总是会耗费一大部分的时间在加载google字体库上, 而且经常加载不成功方法一: 用国内的CDN库来替代主题中的google字体库, 到主题配置文件中设置默认字体库:1host: fonts.useso.com方法二: 关掉字体库的引用, 默认加载本地字体库, 到主题配置文件设置:12font: enable: false未添加功能自定义样式文件更新于:18-10-18// Custom styles./*******************首页样式*****************************/// 顶栏宽度.container .header-inner &#123; width: 100%;&#125;// .headband &#123;// height: 1.5px;// background-image: linear-gradient(90deg, #F79533 0%, #F37055 15%, #EF4E7B 30%, #A166AB 44%, #5073B8 58%, #1098AD 72%, #07B39B 86%, #6DBA82 100%);// &#125;// 页面顶部行高.header &#123; line-height: 1.5;&#125;// // 页面背景色// .container &#123;// background-color: rgba(0, 0, 0, 0.75);// &#125;// 页面留白更改.header-inner &#123; padding-top: 35px; padding-bottom: 0px;&#125;.posts-expand &#123; padding-top: 50px;&#125;.posts-expand .post-meta &#123; margin: 5px 0px 0px 0px;&#125;.post-button &#123; margin-top: 0px;&#125;// 顶栏宽度.container .header-inner &#123; width: 100%;&#125;// 渐变菜带，CSS代码copy自https://githubuniverse.com// .site-meta &#123;// background-image: linear-gradient(90deg, #F79533 0%, #F37055 15%, #EF4E7B 30%, #A166AB 44%, #5073B8 58%, #1098AD 72%, #07B39B 86%, #6DBA82 100%);// &#125;//缩略图指定宽度值显示。img.img-topic &#123; width: 75%;&#125;/*******************文章样式*****************************/// 文章.post &#123; margin-bottom: 50px; padding: 45px 36px 36px 36px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgb(255, 255, 255);&#125;// 文章标题字体.posts-expand .post-title &#123; font-size: 26px; font-weight: 700;&#125;// 文章标题动态效果.posts-expand .post-title-link::before &#123; background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);&#125;// 文章元数据（meta）留白更改.posts-expand .post-meta &#123; margin: 10px 0px 20px 0px;&#125;// 文章的描述description.posts-expand .post-meta .post-description &#123; font-style: italic; font-size: 14px; margin-top: 30px; margin-bottom: 0px; color: #666;&#125;// [Read More]按钮样式.post-button .btn &#123; color: #555 !important; background-color: rgb(255, 255, 255); border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); border: none !important; transition-property: unset; padding: 0px 15px;&#125;.post-button .btn:hover &#123; color: rgb(255, 255, 255) !important; border-radius: 3px; font-size: 15px; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.35); background-image: linear-gradient(90deg, #a166ab 0%, #ef4e7b 25%, #f37055 50%, #ef4e7b 75%, #a166ab 100%);&#125;// 去除在页面文章之间的分割线.posts-expand .post-eof &#123; margin: 0px; background-color: rgba(255, 255, 255, 0);&#125;// 去除页面底部页码上面的横线.pagination &#123; border: none; margin: 0px;&#125;// 文章内标题样式（左边的竖线）.post-body h2, h3, h4, h5, h6 &#123; border-left: 4px solid rgb(161, 102, 171); margin-left: -36px; padding-left: 32px;&#125;// 去掉图片边框.posts-expand .post-body img &#123; border: none; padding: 0px;&#125;// 文章``代码块的自定义样式code &#123; margin: 0px 3px; border: 1px solid #999;&#125;// 文章```代码块顶部样式.highlight figcaption &#123; margin: 0em; padding: 0.5em; background: #eee; border-bottom: 1px solid #e9e9e9;&#125;.highlight figcaption a &#123; color: rgb(80, 115, 184);&#125;// 文章```代码块diff样式pre .addition &#123; background: #e6ffed;&#125;pre .deletion &#123; background: #ffeef0;&#125;//文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125;// 自定义的文章摘要图片样式img.img-topic &#123; width: 100%;&#125;/*************************侧栏样式****************************/// 自定义的侧栏时间样式#days &#123; display: block; color: rgb(7, 179, 155); font-size: 13px; margin-top: 15px;&#125;// 右下角侧栏按钮样式.sidebar-toggle &#123; right: 10px; bottom: 43px; background-color: rgba(247, 149, 51, 0.75); border-radius: 5px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35);&#125;.page-post-detail .sidebar-toggle-line &#123; background: rgb(7, 179, 155);&#125;// 右下角返回顶部按钮样式.back-to-top &#123; line-height: 1.5; right: 10px; padding-right: 5px; padding-left: 5px; padding-top: 2.5px; padding-bottom: 2.5px; background-color: rgba(247, 149, 51, 0.75); border-radius: 5px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.35);&#125;// 侧栏.sidebar &#123; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(0, 0, 0, 0.75);&#125;.sidebar-inner &#123; margin-top: 30px;&#125;// 侧栏顶部文字.sidebar-nav li &#123; font-size: 15px; font-weight: bold; color: rgb(7, 179, 155);&#125;.sidebar-nav li:hover &#123; color: rgb(161, 102, 171);&#125;.sidebar-nav .sidebar-nav-active &#123; color: rgb(7, 179, 155); border-bottom-color: rgb(161, 102, 171); border-bottom-width: 1.5px;&#125;.sidebar-nav .sidebar-nav-active:hover &#123; color: rgb(7, 179, 155);&#125;// 侧栏站点作者名.site-author-name &#123; display: none;&#125;// 侧栏站点描述.site-description &#123; letter-spacing: 5px; font-size: 15px; font-weight: bold; margin-top: 15px; margin-left: 13px; color: rgb(243, 112, 85);&#125;// 侧栏站点文章、分类、标签.site-state &#123; line-height: 1.3; margin-left: 12px;&#125;.site-state-item &#123; padding: 0px 15px; border-left: 1.5px solid rgb(161, 102, 171);&#125;// 侧栏RSS按钮样式.feed-link &#123; margin-top: 15px; margin-left: 7px;&#125;.feed-link a &#123; color: rgb(255, 255, 255); border: 1px solid rgb(158, 158, 158) !important; border-radius: 15px;&#125;.feed-link a:hover &#123; background-color: rgb(161, 102, 171);&#125;.feed-link a i &#123; color: rgb(255, 255, 255);&#125;// 侧栏社交链接.links-of-author &#123; margin-top: 0px;&#125;// 侧栏友链标题.links-of-blogroll-title &#123; margin-bottom: 10px; margin-top: 15px; color: rgba(7, 179, 155, 0.75); margin-left: 6px; font-size: 15px; font-weight: bold;&#125;// 侧栏超链接样式（友链的样式）.sidebar a &#123; color: #ccc; border-bottom: none;&#125;.sidebar a:hover &#123; color: rgb(255, 255, 255);&#125;// 自定义的侧栏时间样式#days &#123; display: block; color: rgb(7, 179, 155); font-size: 13px; margin-top: 15px;&#125;// 侧栏目录链接样式.post-toc ol a &#123; color: rgb(7, 179, 155); border-bottom: 1px solid rgb(96, 125, 139);&#125;.post-toc ol a:hover &#123; color: rgb(161, 102, 171); border-bottom-color: rgb(161, 102, 171);&#125;// 侧栏目录链接样式之当前目录.post-toc .nav .active &gt; a &#123; color: rgb(161, 102, 171); border-bottom-color: rgb(161, 102, 171);&#125;.post-toc .nav .active &gt; a:hover &#123; color: rgb(161, 102, 171); border-bottom-color: rgb(161, 102, 171);&#125;/* 修侧栏目录bug，如果主题配置文件_config.yml的toc是wrap: true */.post-toc ol &#123; padding: 0px 10px 5px 10px;&#125;/* 侧栏目录默认全展开，已注释.post-toc .nav .nav-child &#123; display: block;&#125;*//************************移动端样式*******************************/@media (max-width: 1023px) &#123; .container &#123; background-color: rgba(0, 0, 0, 0); &#125; .sidebar &#123; // box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); border-top-left-radius: 5px; border-bottom-left-radius: 5px; &#125; .feed-link &#123; display: none !important; &#125;&#125;@media (max-width: 767px) &#123; .main &#123; padding-bottom: 120px; &#125; .posts-expand &#123; margin: 0px; padding-top: 10px; &#125; .posts-expand .post-title &#123; font-size: 22px; &#125; .posts-expand .post-meta &#123; font-size: 10px; &#125; .post &#123; margin-bottom: 30px !important; padding: 20px 15px 15px 15px !important; &#125; .post-body h2, h3, h4, h5, h6 &#123; margin-left: -15px; padding-left: 11px; &#125; .posts-expand .post-tags &#123; margin-top: 10px; &#125; .post-widgets &#123; margin-top: 10px; &#125; .comments &#123; margin: 40px 0px 40px 0px !important; &#125; .footer &#123; // box-shadow: 0px -5px 10px 0px rgba(0, 0, 0, 0.5); &#125;&#125;.sidebar-active #sidebar-dimmer &#123; opacity: 0;&#125;// 移动端左上角菜单按钮.site-nav-toggle &#123; top: 35px; left: 91px; // background-color: #222;&#125;.btn-bar &#123; background-color: rgb(255, 255, 255);&#125;// 移动端菜单@media (max-width: 767px) &#123; .menu &#123; text-align: center; // box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5); &#125; .site-nav &#123; top: initial; background-color: rgba(255, 255, 255, 0.75); border-top: none; border-bottom: none; position: relative; z-index: 1024; &#125;&#125;//移动端顶部@media (max-width: 767px) &#123; .site-title &#123; font-size: 28px !important; letter-spacing: 0px !important; &#125; .site-subtitle&#123; letter-spacing: 0px !important; padding-bottom: 0px !important; &#125; .site-meta &#123; // box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5); &#125; .menu .menu-item &#123; margin: 0px 10px !important; &#125;&#125;添加背景图片通过jquery-backstretch，具体操作呢，编辑文件/themes/next/layout/_layout.swig：12345+ &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-backstretch/2.0.4/jquery.backstretch.min.js"&gt;&lt;/script&gt;;+ &lt;script&gt;+ $("body").backstretch("https://背景图.jpg");+ &lt;/script&gt;&lt;/body&gt;加入到文件最后面前面即可。二维码打赏得到二维码图片资源后，读者们可将二维码图片放到NexT根目录/source/images/文件夹下。开启打赏功能打开主题配置文件，搜索reward关键词，添加打赏的配置信息12345678# Reward# If true, reward would be displayed in every article by default.# And you can show or hide one article specially through add page variable `reward: true/false`.reward: enable: true //默认是false，改为true comment: 您的支持是对我最大的鼓励 wechatpay: /images/wechatpay.jpg #图片链接或图片相对路径 alipay: /images/alipay.jpg #图片链接或图片相对路径添加自定义页面[友链] 未添加设置菜单项的显示中文文本，打开themes/next/languages/zh-CN.yml文件,搜索 menu 关键字，修改对应中文或者新增123456789101112menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 # schedule: 日程表 # sitemap: 站点地图 # commonweal: 公益404 # 新增menu links: 友链 # 新增该选项表示新增“友链”菜单新增links菜单在主题配置文件，搜索menu，新增links: /links/ || link123456789# 菜单示例配置menu: home: / || home reading: /reading/ || book archives: /archives/ || archive categories: /categories/ || th #tags: /tags/ || tags about: /about/ || user links: /links/ || linkhexo根目录下，执行以下命令，新建友链页面1hexo new page links修改站点目录下source/links的 index.md 文件123456---title: 友链tags: linkscategories: linkscomments: false---添加最近文章栏目修改themes/next/layout/_macro/sidebar.swig 。找到theme.social板块代码，在该板块最后的endif后隔一行添加如下代码。123456789101112131415161718&#123;# recent posts #&#125;&#123;% if theme.recent_posts %&#125; &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout &#125;&#125;"&gt; &lt;div class="links-of-blogroll-title"&gt; &lt;!-- modify icon to fire by szw --&gt; &lt;i class="fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;" aria-hidden="true"&gt;&lt;/i&gt; &#123;&#123; theme.recent_posts_title &#125;&#125; &lt;/div&gt; &lt;ul class="links-of-blogroll-list"&gt; &#123;% set posts = site.posts.sort('-date') %&#125; &#123;% for post in posts.slice('0', '5') %&#125; &lt;li class="recent_posts_li"&gt; &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;" target="_blank"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt;&#123;% endif %&#125;编辑themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl12345678li.recent_posts_li &#123; text-align: cengter; display: block; word-break: keep-all; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;&#125;主题配置文件themes/next/_config.yml,添加如下代码123recent_posts_title: 近期文章recent_posts_layout: blockrecent_posts: true文章置顶功能移除默认安装的插件：1npm uninstall hexo-generator-index --save安装新插件:1npm install hexo-generator-index-pin-top --save最后编辑有这需求的相关文章时，在Front-matter（文件最上方以—分隔的区域）加上一行：1top: true如果你置顶了多篇，怎么控制顺序呢？设置top的值（大的在前面），比如：1234567# Post a.mdtitle: atop: 1# Post b.mdtitle: btop: 10文章 b 便会显示在文章 a 的前面。添加 TopX 页面超深度优化-5.8小节参考直接访问不了的网站，maybe……需要翻墙哦翻墙镜像https://github.com/googlehosts/hosts近期学习篇NexT主题个性定制与深度优化-点击特效 √Hexo 搭建个人博客系列：主题美化篇Hexo 搭建个人博客系列：进阶设置篇-点击特效等theme-next!Hexo网站的一次华丽升级Hexo NexT 主题6.x版本的使用配置与美化hexo next主题优化，打造个人精致网站基于Hexo搭建个人博客——进阶篇(从入门到入土)打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化hexo的next主题个性化教程:打造炫酷网站hexo博客框架环境搭建，并使用next主题打造精美的个人博客网站Hexo+NexT 打造一个炫酷博客个人主页与 Hexo NexT 博客搭建记录hexo博客nexT主题美化环境搭建篇GitHub+Hexo 搭建个人网站详细教程-知乎七牛云使用 Hexo 搭建 GitHub Page 博客(二)–使用 GitHub 分支保存 Hexo 环境和博文Halo-一款现代化的个人独立博客系统如何用Github的gh-pages分支展示自己的项目黑猴子的家：GitHub 之 gh-pages 新手入门使用Github的gh-pages分支展示一个页面使用七牛云图床并实现快速贴图七牛云图床和Markdown使用个性博客篇https://theme-next.org/学而时习之的博客https://io-oi.mehttps://blog.dlzhang.com-好人https://leaferx.online/chloneda的博客http://xyua.tophttps://moweide.com/eyhn的博客https://yangbingdong.comcduyzh的博客zhuimeng的博客shuyelife的博客https://www.qcmoke.site/http://yearito.cn/http://eternalzttz.com/http://shenzekun.cn/https://11.tt/博客-旋转立方体主题优化篇NexT官方主题配置打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化Github+Hexo一站式部署个人博客Hexo+NexT 打造一个炫酷博客–博客杂言非语Hexo博客NexT主题美化之新增看板娘(能说话、能换装)live2d-plugin-2.0 博客已迁移基于Hexo搭建个人博客——进阶篇(从入门到入土)hexo-helper-live2d中文文档L2Dwidget用户手册2017年最新基于hexo搭建个人免费博客——自定义页面样式一NexT主题个性定制与深度优化-爆炸特效Hexo：NexT主题优化之路这应该是最全的hexo博客搭建以及next美化教程畅玩Hexo(2)：NexT主题Hexo + GitHub (Coding) Pages 搭建博客“为next主题的主页文章添加阴影效果”【搜索优化】Hexo-next百度和谷歌搜索优化hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗？Hexo博客-NexT主题：使用leancloud进行页面访客统计Hexo+Next主题优化-知乎【转】Blog摘要配图利用 Hexo + Github Pages 搭建博客并优化 Next 主题教程大哥的NexT最新7.3版个性化样式源码hexo小技巧-首页显示文章摘要及图片进度条样式问题解决篇NexT7.3最新自定义样式文件示例NexT主题升级https://github.com/theme-next/hexo-theme-next/releaseshttps://github.com/theme-next/hexo-theme-next/pull/868https://theme-next.org/https://github.com/theme-next/hexo-theme-next/issues/982https://github.com/theme-next/hexo-theme-next/issues/1021帖子在线编辑教你顺滑升级6.x版本的NexT主题给你的hexo文章列表加上一个固定高度的封面1.注脚测试 ↩]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Clover主题配置]]></title>
    <url>%2F%2Fblog%2FClover%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[在站点配置文件的theme更换主题名称即可切换博客主题，不影响之前一个主题的博客设置zh-CN.yml123456789categories: 分类tags: 标签archive_a: 归档archive_b: 归档：%spage: 第 %d 页category: 分类tag: 标签other_category: 其他links: 友链_config.yml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# Custom navnav: title: "Joel Ying"favicon: ""# Custom backgroundbackground: color: "#eff0f6" image: ""# Social mediasocial: Dribbble: # https://dribbble.com/clovertuan Behance: # https://www.behance.net/clovertuan Lofter: # http://clovertuan.lofter.com/ Instagram: # https://www.instagram.com/clovertuan/ GitHub: https://github.com/joelYing# Custom footermail: 635328166@qq.comcopyright: All rights reserved @Joel Ying# Custom menu. You can specific the path or the card style (only useful for category page).# Two kinds of card style: 'project-card', 'article-card',# Never mind the name.menu: # Project: # path: /categories/Projects # card: project-card # Stuffs: # path: /tags/Stuffs # card: article-card home: / archives: /archives categories: /categories tags: /tags link: /links about: /about# Specific default categories or tags of home page.# Post which belongs to `category` or `tag` and don't belongs to `except_category` or `except_tag` will be filtered.home: # set card style of home page # category: Projects # tag: 算法 # except_category: 树 # except_tag: # - 总结 # - csscard_style: home: project-card archive: article-card tag: article-card category: article-card link: article-card about: article-card# category pagecategory_generator: category_per_page: 3 post_per_category: 3node_sass: outputStyle: nested precision: 5 sourceComments: falseabout-index.md1234567---layout: abouttitle: aboutdate: 2019-08-12 14:52:23---Hi，这里是半个兴趣使然的程序员category-index.md12345---layout: categorytitle: categoriesdate: 2019-08-12 14:48:57---links-index.md123456789---title: linksdate: 2019-08-13 10:43:10---WeChat: yjl15822897030QQ: 635328166MyWeb: www.joelyings.comLearn From: https://clovertuan.github.io/tag-index.md12345---layout: tagtitle: tagsdate: 2019-08-12 14:44:58---效果图]]></content>
      <categories>
        <category>Clover</category>
      </categories>
      <tags>
        <tag>CloverConfig</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github Pages基础版搭建攻略]]></title>
    <url>%2F%2Fblog%2FHexo%2BGithub%20Pages%E5%9F%BA%E7%A1%80%E7%89%88%E6%90%AD%E5%BB%BA%E6%94%BB%E7%95%A5.html</url>
    <content type="text"><![CDATA[引子早就有想做一个个人博客的想法，想写些内容放进去，给自己提个醒，也想把过程分享给大家，所以一开始也在CSDN，简书上发了许多，但是没有一种真正的属于自己的空间的感觉于是借此机会，正式尝试一下通过Hexo+GitHub来搭建一个个人博客，记录如下概念HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，详情可见官网Hexo也是GitHub上的开源项目Github Pages这里我们用到了GitHub提供的GitHub Pages，完全免费、无须自己购买云服务搭建、支持多功能等，是GitHub Pages的优势之处，当然也会有一些限制，比如网站大小不能超过1GB等，但是综合来说GitHub Pages依旧是中小型博客或项目主页的最佳选项之一（参考一）当然GitHub Pages也是有着自己的主题，相对来说比较简单，所以官方推荐了使用Jekyll进行对博客的丰富但是这里我就尝试了用Node.js编写的Hexo来搭建，除此之外还有Go 编写的 Hugo，Python 编写的 Pelican，以及更人性化的 Gridea等步骤GitHub创建个人仓库安装Git安装Node.js安装Hexo将 GitHub Pages 和 Hexo 关联使用图床完成基础版搭建GitHub创建个人仓库登录到GitHub，如果没有GitHub账号，注册一个GitHub账号，创建一个名为username.github.io的新存储库，其中username是你的用户名（或组织名称），如下图创建成功之后，你就能看到已经生成了这样的一个名称为‘’username.github.io’’的仓库安装Git简单来说Git是开源的分布式版本控制系统，我们网站在本地搭建好了，需要使用Git将项目同步到GitHub上。如果想了解Git的细节，参考廖雪峰老师的Git教程，在Windows上使用Git，可以从Git官网直接下载安装程序，然后按默认选项安装即可安装完成后，右键打开“Git Bash Here”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！在打开的窗口中输入命令设置user.name和user.email配置信息12git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱"生成ssh密钥文件1ssh-keygen -t rsa -C "你的GitHub注册邮箱"然后直接三个回车即可，默认不需要设置密码然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制，.ssh文件一般在“C盘下\用户文件夹\管理员文件夹”下打开GitHub&gt;Settings&gt;SSH and GPG keys页面，新建”New SSH Key”，Title为标题，随意填即可，将刚刚复制的id_rsa.pub内容复制进去，最后点击Add SSH key在Git Bash中检测GitHub公钥设置是否成功，输入1ssh git@github.com如上则说明成功这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的安装Node.jsHexo基于Node.js，Node.js下载地址下载安装包，注意安装Node.js会包含环境变量及npm的安装，例如版本 10.16.2 (includes npm 6.9.0)，安装后检测Node.js是否安装成功，重新打开Git Bash输入1node -v出现对应版本号即说明Node.js安装成功，检测npm是否安装成功1npm -v至此，安装Hexo的环境已经全部搭建完成安装HexoHexo就是我们个人博客的框架，这里需要在自己的电脑里创建一个文件夹，这里我命名为HexoGP，Hexo框架与以后你自己发布的网站都在这个文件夹中，创建好后，进入文件夹中 -&gt; Git Bash Here -&gt; 使用npm命令安装Hexo1npm install -g hexo-cli安装完成后，初始化我们的博客，输入：1hexo init HexoGP这是HexoGP文件夹下生成的内容public文件夹下包含有发表的博文及主要页面的HTML文件，source下是发表博文以及其他页面的内容的md文件，themes则是下载的主题文件为了检测网站的雏形，分别按顺序输入一下三条命令（新建博客文章、生成网页、在本地预览）：123hexo new testhexo ghexo s完成后在浏览器输入: http://localhost:4000/，可以看到我们写出的第一篇博文test这是在Hexo默认主题下的页面Hexo常用命令123npm install hexo -g #安装Hexonpm update hexo -g #升级 hexo init #初始化博客命令简写12345678910hexo n "我的博客" == hexo new "我的博客" #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令将 GitHub Pages 和 Hexo 关联在我的HexoGP根目录里_config.yml文件为站点配置文件，根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件，打开站点配置文件_config.yml修改deploy:1234deploy: type: git repository: https://github.com/joelYing/joelYing.github.io.git branch: master保存站点配置，其实就是让hexo知道你要把Hexo部署在哪个位置，很明显，我们部署在我们GitHub仓库里，最后安装Git部署插件1npm install hexo-deployer-git --save红框中的出现是由于fsevent是mac系统的，在win或者Linux下使用了，所以会有警告，忽略即可fsevent的作用是能够检测文件目录的修改，可以记录恶意软件的非法操作，获取恶意软件的完整路径，删除和修改日期这时，我们分别再输入三条命令，即可在通过xxx.github.io看到我们的博客了123hexo cleanhexo ghexo d可能出现的问题在 hexo d 部署的时候123456789101112131415$ hexo dINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...fatal: LF would be replaced by CRLF in 2019/08/11/hello-world/index.htmlFATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlError: Spawn failed at ChildProcess.&lt;anonymous&gt; (D:\HexoGithubPages\HexoGP\node_modules\hexo-util\lib\spawn.js:52:19) at ChildProcess.emit (events.js:198:13) at ChildProcess.cp.emit (D:\HexoGithubPages\HexoGP\node_modules\cross-spawn\lib\enoent.js:40:29) at Process.ChildProcess._handle.onexit (internal/child_process.js:248:12)fatal: LF would be replaced by CRLF in index.html这时，需要在 HexoGP\.deploy_git\.git 目录下的config文件中添加12autocrlf = falsesafecrlf = falseHexo个性化配置更换主题Hexo提供了很多主题，我在大概浏览了近200多个主题后使用的是Clover主题，相对来说十分简洁，当然更多的可能会选择NexT主题，这个主题后续也会学习使用在HexoGP目录（即自己创建博客的文件夹）中打开Git Bash，输入如下，下载Clover主题到HexoGP目录中themes下的clover文件夹中1git clone https://github.com/esappear/hexo-theme-clover themes/clover这是下载完成后clover文件夹下的内容，_config.yml就是主题配置文件注意，若是下载NexT主题时，使用Clone with HTTPS下载到一半下载失败，实际上可能是因为项目太久，tag资源文件太大1git clone https://github.com/iissnan/hexo-theme-next themes/next可以尝试将https地址换成ssh地址来clone，如下，这样就可以成功下载1git clone git@github.com:iissnan/hexo-theme-next.git themes/next打开HexoGP文件夹下的_config.yml站点配置文件，将theme修改如下:1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: clover再次部署网站，hexo g、hexo d，查看效果，就可以看到使用了Clover主题的页面基础使用由于使用的是Clover主图，参考https://github.com/esappear/hexo-theme-clover根据Readme上提示，还需 Add hexo-renderer-sass1npm install hexo-renderer-sass --saveClover主题可以为文章添加概述以及图片等以及添加新的页面我们来新建一篇博文1hexo new "Python爬取视频指南"新建之后我们可以在HexoGP文件夹的source文件下的_posts文件夹下找到Python爬取视频指南.md，打开之后就可以用Markdown语法进行编辑tags表示这篇文章属于Python标签，categories表示属于Python分类，excerpt表示概述的内容，photos就是文章的封面图片了这里需要注意的是，最开始处的，无论是title后面，还是excerpt后面跟的冒号，都必须是英文的冒号 : ，而且冒号后面必须添加一个空格，否则在生成部署时会报错其他的配置等等主要是在站点配置文件中修改站点基本信息，如网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等，以及Clover的主题配置文件中修改，另外再根据Readme中的描述就能初步完成，发表一篇博文啦使用图床图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法完成图片的插入，这种网站就被成为图床1![图片信息](外部链接)这里介绍七牛云的使用方法，还有又拍云等大家可以自己尝试，注册实名认证七牛云账号就不过多赘述，实际添加图片可以参考七牛云存储添加自定义域名和域名解析图文教程这里主要看一下华为云如何自定义域名 CNAME 解析，进入华为云控制台，域名注册服务，进入域名解析，选择其中的一个域名，点击解析点击添加记录集添加如下其中，类型选择 CNAME；主机记录：主域名前面的部分，如image.joelyings.com，这里的主机记录就是 image；值就是七牛云域名信息中 CNAME 的值 image.joelyings.com.qiniudns.com完成基础版搭建From https://joelying.github.io/参考Hexo+Github建站GitHub+Hexo 搭建个人网站详细教程Hexo建站教程Github+Hexo一站式部署个人博客(原创)GitHub Pages 搭建教程Hexo文档error YAMLException: can not read a block mapping entry…error git clone时报RPC failed; curl 18 transfer closed with outstanding read data remaining 错误git clone 报错：error: RPC failed; curl 18 transfer closed with outstanding read data remaining 解决办法在git bash 中配置git用户名和邮箱及查看配置信息七牛云存储添加自定义域名和域名解析图文教程网站域名、备案、七牛云图床重新搭建与博客整理如何验证域名已经配置成功–七牛云样本博客hexo里面Markdown对图片进行居中、设置大小看板娘Halo博客nexT-Muse]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Clover</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python爬取视频指南]]></title>
    <url>%2F%2Fblog%2FPython%E7%88%AC%E5%8F%96%E8%A7%86%E9%A2%91%E6%8C%87%E5%8D%97.html</url>
    <content type="text"><![CDATA[前言前两天尔羽说让我爬一下菜鸟窝的教程视频，这次就跟大家来说说Python爬取视频的经验正文https://www.cniao5.com/菜鸟窝上有很多教程视频，但是这些视频好像没有直接的下载地址，而且有些教程视频还是有期限的，那么问题就产生了我看的速度比较慢而且视频又很多，没等我看完视频就到期了怎么办？这时候写一个爬虫将这些教程视频下载下来就很好地解决了这个问题当然，对于某些视频网站的VIP电影、视频之类的，一般情况下是无法在没有开通VIP的情况下用爬虫下载的，因为涉及到利益问题，同时数据传输也是加密的；想要看的话还是得开通会员再进行爬取回到这次的目标上来，我们要爬取的是https://www.cniao5.com/course/lessons/10153上面的24章，共计202个教程视频接下来我们来看看我们应该如何获取这些视频首先我们看一下这个界面的源代码中没有关于课程视频的信息，那么我们点进去一个视频看看通过开发者工具我们可以看到左侧都是这次加载视频是动态加载的信息，我们一个个来看首先是url，我们可以看到这个链接是 Post 方式请求的（然鹅实际上再通过postman测试可以知道，并不用带上什么参数请求，吓唬人呢…）这就是url返回的数据，其中 hd 、shd 代表高清、超清的视频类型，而当你访问这个链接后会自动下载一个 m3u8 文件，这介绍一下m3u8 文件是指UTF-8编码格式的M3U文件。M3U文件是记录了一个索引纯文本文件，打开它时播放软件并不是播放它，而是根据它的索引找到对应的音视频文件的网络地址进行在线播放而我们下载视频的方式就是通过向m3u8文件中的这些 .ts 的链接发送请求而下载一个个 ts视频流 （暂时这么称呼）下一个就是 chapters ，这里呢则是包含了所有24章视频的一些基本信息注意这里的 vid 参数，之后我们会用到这个就是网页上加载的m3u8 文件这看似乱码的ts文件下载下来后就是一个几秒钟的视频了而我们最后要做的就是将这些 ts 文件合成为一个 mp4 文件那么如何来操作呢？思路通过请求 chapters 的链接获取每一个章节中每一个lesson的播放 url 地址（就是返回中带有 hd 、shd的），取出并请求 hd 的链接，下载m3u8文件，匹配m3u8文件中的每一个 ts ，请求 ts 文件对应的链接并下载到本地，最后合成为一个mp4视频来跟着代码看一下首先小编是在本地先用代码创建好最终合成视频的存放的空文件夹以便访问12345678910def mkd(): for i in range(1, 25): finalpath = 'D:\\Python\\PycharmProject\\FinalCniao5\\&#123;&#125;'.format(i) # 判断路径文件是否存在，不存在则创建 f = os.path.exists(finalpath) if not f: os.makedirs(finalpath) print('make file success...') else: print('file already exists...')接着创建对应章节的文件夹1234567891011121314151617# 防止 requests 开得太多s = requests.session()r_chapters = s.get('https://www.cniao5.com/api/v1/course/10153/chapters')json_chapters = r_chapters.json()# print(json_chapters)for chapter in json_chapters: # 每一个章节 chapter_name = chapter['bsort'] print(chapter_name) # 根据课程数创建对应的课程文件夹 path1 = self.file_path1.format(chapter_name) f = os.path.exists(path1) if not f: os.makedirs(path1) print('make file success...') else: print('file already exists...')对章节中的每一个课程，获取其 id、key、file_id 创建对应的课程文件夹（用来保存ts文件）1234567891011121314for lessons in chapter['lessons']: # 章节下的每一个课程 lessons_name = 'lessons' + str(lessons['bsort']) # 获取其id video_id = lessons['video_info']['vid'] # 获取 key key = lessons['key'] # 后面用到 file_id = lessons['video_info']['file_id'] print(lessons_name, video_id) # 每个视频创建一个视频id的文件夹 path = 'D:\\Python\\PycharmProject\\Cniao5\\&#123;&#125;\\&#123;&#125;'.format(chapter_name, lessons_name) f = os.path.exists(path) # 基于中断后，创建文件时判断，若存在该文件夹则跳过对该视频的下载，若不存在则继续对于之后则需要分为两种情况，我不知道菜鸟窝是怎么想的，你可以看到对于有的视频 vid 有具体的数值，有的则是 0也就是说对于 vid 有值的我们可以很容易构造 url 链接从而获取 m3u8 文件进而下载 ts 视频；但是对于没有的来说就麻烦了，我们不能直接构造这个 url 链接而对于这一类视频则是这样的这类视频不是通过 m3u8 来处理视频的而是直接给了一个 mp4 的地址，那么也就是说对于 vid 为0的视频我们需要访问https://playvideo.qcloud.com/getplayinfo/v2/1255567694/5285890782726972640才可以拿到这个视频，那么这个 url 中后面的两个参数是什么呢这个 5285890782726972640 我们在上图中可以发现就是之前提到的 file_id 这也是我们为什么要获取的原因；而前面的1255567694你多看几个就知道这个是不变的而当你去访问这个 MP4 的链接时菜鸟窝会告诉你，你没有权限请求这个链接，what？而这时候你要知道所谓爬虫就是模拟人对浏览器进行的操作而获取一定的结果，那么我们可以带上请求头来试试，小编是在用 fiddler 抓包后肯定了这一点，最后测试发现只要带上 header 中的 referer 就可以访问而这个 referer 也是有讲究的，这个后面跟的奇怪的参数正是上述中你们都快忘了的 key ，这个是每个 lesson 中都有的所以对于这种情况，之后只要把请求 MP4 链接后的内容以二进制方式保存就行此外还要注意对于 ts 文件，在请求时的前缀是https://vodi97egsxf.vod.126.net/vodi97egsxf/而在合并 ts 文件时，我用的是通过Python调用 windows 自带的合成的命令来合成，但是需要注意合成时候的文件名一定按 001，002，…，010，…，099，100…如此排列；而如果按 1，2，3，…，10，11，…，99，100 则合并不会成功所以在保存时就应该注意指定文件的名称即可好了看到这里相信你应该有了一个基本的认识了，需要完整源码的也可以联系小编]]></content>
      <categories>
        <category>Python爬虫实战</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
